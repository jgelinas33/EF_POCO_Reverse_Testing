

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "AdventureworksDemo\App.config"
//     Connection String Name: "AdventureworksDB"
//     Connection String:      "Data Source=localhost;Initial Catalog=AdventureWorks2014;Integrated Security=True;Application Name=Code First Testing"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.61
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace DBModel
{
    using System.Linq;

    #region Unit of work

    public interface IAdventureworksDBContext : System.IDisposable
    {
        System.Data.Entity.DbSet<AwBuildVersion> AwBuildVersions { get; set; } // AWBuildVersion
        System.Data.Entity.DbSet<DatabaseLog> DatabaseLogs { get; set; } // DatabaseLog
        System.Data.Entity.DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        System.Data.Entity.DbSet<HumanResources_Department> HumanResources_Departments { get; set; } // Department
        System.Data.Entity.DbSet<HumanResources_Employee> HumanResources_Employees { get; set; } // Employee
        System.Data.Entity.DbSet<HumanResources_EmployeeDepartmentHistory> HumanResources_EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory
        System.Data.Entity.DbSet<HumanResources_EmployeePayHistory> HumanResources_EmployeePayHistories { get; set; } // EmployeePayHistory
        System.Data.Entity.DbSet<HumanResources_JobCandidate> HumanResources_JobCandidates { get; set; } // JobCandidate
        System.Data.Entity.DbSet<HumanResources_Shift> HumanResources_Shifts { get; set; } // Shift
        System.Data.Entity.DbSet<Person_Address> Person_Addresses { get; set; } // Address
        System.Data.Entity.DbSet<Person_AddressType> Person_AddressTypes { get; set; } // AddressType
        System.Data.Entity.DbSet<Person_BusinessEntity> Person_BusinessEntities { get; set; } // BusinessEntity
        System.Data.Entity.DbSet<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // BusinessEntityAddress
        System.Data.Entity.DbSet<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // BusinessEntityContact
        System.Data.Entity.DbSet<Person_ContactType> Person_ContactTypes { get; set; } // ContactType
        System.Data.Entity.DbSet<Person_CountryRegion> Person_CountryRegions { get; set; } // CountryRegion
        System.Data.Entity.DbSet<Person_EmailAddress> Person_EmailAddresses { get; set; } // EmailAddress
        System.Data.Entity.DbSet<Person_Password> Person_Passwords { get; set; } // Password
        System.Data.Entity.DbSet<Person_Person> Person_People { get; set; } // Person
        System.Data.Entity.DbSet<Person_PersonPhone> Person_PersonPhones { get; set; } // PersonPhone
        System.Data.Entity.DbSet<Person_PhoneNumberType> Person_PhoneNumberTypes { get; set; } // PhoneNumberType
        System.Data.Entity.DbSet<Person_StateProvince> Person_StateProvinces { get; set; } // StateProvince
        System.Data.Entity.DbSet<Production_BillOfMaterial> Production_BillOfMaterials { get; set; } // BillOfMaterials
        System.Data.Entity.DbSet<Production_Culture> Production_Cultures { get; set; } // Culture
        System.Data.Entity.DbSet<Production_Document> Production_Documents { get; set; } // Document
        System.Data.Entity.DbSet<Production_Illustration> Production_Illustrations { get; set; } // Illustration
        System.Data.Entity.DbSet<Production_Location> Production_Locations { get; set; } // Location
        System.Data.Entity.DbSet<Production_Product> Production_Products { get; set; } // Product
        System.Data.Entity.DbSet<Production_ProductCategory> Production_ProductCategories { get; set; } // ProductCategory
        System.Data.Entity.DbSet<Production_ProductCostHistory> Production_ProductCostHistories { get; set; } // ProductCostHistory
        System.Data.Entity.DbSet<Production_ProductDescription> Production_ProductDescriptions { get; set; } // ProductDescription
        System.Data.Entity.DbSet<Production_ProductDocument> Production_ProductDocuments { get; set; } // ProductDocument
        System.Data.Entity.DbSet<Production_ProductInventory> Production_ProductInventories { get; set; } // ProductInventory
        System.Data.Entity.DbSet<Production_ProductListPriceHistory> Production_ProductListPriceHistories { get; set; } // ProductListPriceHistory
        System.Data.Entity.DbSet<Production_ProductModel> Production_ProductModels { get; set; } // ProductModel
        System.Data.Entity.DbSet<Production_ProductModelIllustration> Production_ProductModelIllustrations { get; set; } // ProductModelIllustration
        System.Data.Entity.DbSet<Production_ProductModelProductDescriptionCulture> Production_ProductModelProductDescriptionCultures { get; set; } // ProductModelProductDescriptionCulture
        System.Data.Entity.DbSet<Production_ProductPhoto> Production_ProductPhotoes { get; set; } // ProductPhoto
        System.Data.Entity.DbSet<Production_ProductProductPhoto> Production_ProductProductPhotoes { get; set; } // ProductProductPhoto
        System.Data.Entity.DbSet<Production_ProductReview> Production_ProductReviews { get; set; } // ProductReview
        System.Data.Entity.DbSet<Production_ProductSubcategory> Production_ProductSubcategories { get; set; } // ProductSubcategory
        System.Data.Entity.DbSet<Production_ScrapReason> Production_ScrapReasons { get; set; } // ScrapReason
        System.Data.Entity.DbSet<Production_TransactionHistory> Production_TransactionHistories { get; set; } // TransactionHistory
        System.Data.Entity.DbSet<Production_TransactionHistoryArchive> Production_TransactionHistoryArchives { get; set; } // TransactionHistoryArchive
        System.Data.Entity.DbSet<Production_UnitMeasure> Production_UnitMeasures { get; set; } // UnitMeasure
        System.Data.Entity.DbSet<Production_WorkOrder> Production_WorkOrders { get; set; } // WorkOrder
        System.Data.Entity.DbSet<Production_WorkOrderRouting> Production_WorkOrderRoutings { get; set; } // WorkOrderRouting
        System.Data.Entity.DbSet<Purchasing_ProductVendor> Purchasing_ProductVendors { get; set; } // ProductVendor
        System.Data.Entity.DbSet<Purchasing_PurchaseOrderDetail> Purchasing_PurchaseOrderDetails { get; set; } // PurchaseOrderDetail
        System.Data.Entity.DbSet<Purchasing_PurchaseOrderHeader> Purchasing_PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader
        System.Data.Entity.DbSet<Purchasing_ShipMethod> Purchasing_ShipMethods { get; set; } // ShipMethod
        System.Data.Entity.DbSet<Purchasing_Vendor> Purchasing_Vendors { get; set; } // Vendor
        System.Data.Entity.DbSet<Sales_CountryRegionCurrency> Sales_CountryRegionCurrencies { get; set; } // CountryRegionCurrency
        System.Data.Entity.DbSet<Sales_CreditCard> Sales_CreditCards { get; set; } // CreditCard
        System.Data.Entity.DbSet<Sales_Currency> Sales_Currencies { get; set; } // Currency
        System.Data.Entity.DbSet<Sales_CurrencyRate> Sales_CurrencyRates { get; set; } // CurrencyRate
        System.Data.Entity.DbSet<Sales_Customer> Sales_Customers { get; set; } // Customer
        System.Data.Entity.DbSet<Sales_PersonCreditCard> Sales_PersonCreditCards { get; set; } // PersonCreditCard
        System.Data.Entity.DbSet<Sales_SalesOrderDetail> Sales_SalesOrderDetails { get; set; } // SalesOrderDetail
        System.Data.Entity.DbSet<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader
        System.Data.Entity.DbSet<Sales_SalesOrderHeaderSalesReason> Sales_SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason
        System.Data.Entity.DbSet<Sales_SalesPerson> Sales_SalesPersons { get; set; } // SalesPerson
        System.Data.Entity.DbSet<Sales_SalesPersonQuotaHistory> Sales_SalesPersonQuotaHistories { get; set; } // SalesPersonQuotaHistory
        System.Data.Entity.DbSet<Sales_SalesReason> Sales_SalesReasons { get; set; } // SalesReason
        System.Data.Entity.DbSet<Sales_SalesTaxRate> Sales_SalesTaxRates { get; set; } // SalesTaxRate
        System.Data.Entity.DbSet<Sales_SalesTerritory> Sales_SalesTerritories { get; set; } // SalesTerritory
        System.Data.Entity.DbSet<Sales_SalesTerritoryHistory> Sales_SalesTerritoryHistories { get; set; } // SalesTerritoryHistory
        System.Data.Entity.DbSet<Sales_ShoppingCartItem> Sales_ShoppingCartItems { get; set; } // ShoppingCartItem
        System.Data.Entity.DbSet<Sales_SpecialOffer> Sales_SpecialOffers { get; set; } // SpecialOffer
        System.Data.Entity.DbSet<Sales_SpecialOfferProduct> Sales_SpecialOfferProducts { get; set; } // SpecialOfferProduct
        System.Data.Entity.DbSet<Sales_Store> Sales_Stores { get; set; } // Store

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);

        // Stored Procedures
        System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate);
        System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel>> UspGetBillOfMaterialsAsync(int? startProductId, System.DateTime? checkDate);

        System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId);
        System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetEmployeeManagersReturnModel>> UspGetEmployeeManagersAsync(int? businessEntityId);

        System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId);
        System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetManagerEmployeesReturnModel>> UspGetManagerEmployeesAsync(int? businessEntityId);

        System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate);
        System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel>> UspGetWhereUsedProductIdAsync(int? startProductId, System.DateTime? checkDate);

        int UspLogError(out int? errorLogId);
        // UspLogErrorAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UspPrintError();
        // UspPrintErrorAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int UspSearchCandidateResumes(string searchString, bool? useInflectional, bool? useThesaurus, int? language);
        // UspSearchCandidateResumesAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int HumanResources_UspUpdateEmployeeHireInfo(int? businessEntityId, string jobTitle, System.DateTime? hireDate, System.DateTime? rateChangeDate, decimal? rate, byte? payFrequency, bool? currentFlag);
        // HumanResources_UspUpdateEmployeeHireInfoAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int HumanResources_UspUpdateEmployeeLogin(int? businessEntityId, System.Data.Entity.Hierarchy.HierarchyId organizationNode, string loginId, string jobTitle, System.DateTime? hireDate, bool? currentFlag);
        // HumanResources_UspUpdateEmployeeLoginAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int HumanResources_UspUpdateEmployeePersonalInfo(int? businessEntityId, string nationalIdNumber, System.DateTime? birthDate, string maritalStatus, string gender);
        // HumanResources_UspUpdateEmployeePersonalInfoAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AdventureworksDBContext : System.Data.Entity.DbContext, IAdventureworksDBContext
    {
        public System.Data.Entity.DbSet<AwBuildVersion> AwBuildVersions { get; set; } // AWBuildVersion
        public System.Data.Entity.DbSet<DatabaseLog> DatabaseLogs { get; set; } // DatabaseLog
        public System.Data.Entity.DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        public System.Data.Entity.DbSet<HumanResources_Department> HumanResources_Departments { get; set; } // Department
        public System.Data.Entity.DbSet<HumanResources_Employee> HumanResources_Employees { get; set; } // Employee
        public System.Data.Entity.DbSet<HumanResources_EmployeeDepartmentHistory> HumanResources_EmployeeDepartmentHistories { get; set; } // EmployeeDepartmentHistory
        public System.Data.Entity.DbSet<HumanResources_EmployeePayHistory> HumanResources_EmployeePayHistories { get; set; } // EmployeePayHistory
        public System.Data.Entity.DbSet<HumanResources_JobCandidate> HumanResources_JobCandidates { get; set; } // JobCandidate
        public System.Data.Entity.DbSet<HumanResources_Shift> HumanResources_Shifts { get; set; } // Shift
        public System.Data.Entity.DbSet<Person_Address> Person_Addresses { get; set; } // Address
        public System.Data.Entity.DbSet<Person_AddressType> Person_AddressTypes { get; set; } // AddressType
        public System.Data.Entity.DbSet<Person_BusinessEntity> Person_BusinessEntities { get; set; } // BusinessEntity
        public System.Data.Entity.DbSet<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // BusinessEntityAddress
        public System.Data.Entity.DbSet<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // BusinessEntityContact
        public System.Data.Entity.DbSet<Person_ContactType> Person_ContactTypes { get; set; } // ContactType
        public System.Data.Entity.DbSet<Person_CountryRegion> Person_CountryRegions { get; set; } // CountryRegion
        public System.Data.Entity.DbSet<Person_EmailAddress> Person_EmailAddresses { get; set; } // EmailAddress
        public System.Data.Entity.DbSet<Person_Password> Person_Passwords { get; set; } // Password
        public System.Data.Entity.DbSet<Person_Person> Person_People { get; set; } // Person
        public System.Data.Entity.DbSet<Person_PersonPhone> Person_PersonPhones { get; set; } // PersonPhone
        public System.Data.Entity.DbSet<Person_PhoneNumberType> Person_PhoneNumberTypes { get; set; } // PhoneNumberType
        public System.Data.Entity.DbSet<Person_StateProvince> Person_StateProvinces { get; set; } // StateProvince
        public System.Data.Entity.DbSet<Production_BillOfMaterial> Production_BillOfMaterials { get; set; } // BillOfMaterials
        public System.Data.Entity.DbSet<Production_Culture> Production_Cultures { get; set; } // Culture
        public System.Data.Entity.DbSet<Production_Document> Production_Documents { get; set; } // Document
        public System.Data.Entity.DbSet<Production_Illustration> Production_Illustrations { get; set; } // Illustration
        public System.Data.Entity.DbSet<Production_Location> Production_Locations { get; set; } // Location
        public System.Data.Entity.DbSet<Production_Product> Production_Products { get; set; } // Product
        public System.Data.Entity.DbSet<Production_ProductCategory> Production_ProductCategories { get; set; } // ProductCategory
        public System.Data.Entity.DbSet<Production_ProductCostHistory> Production_ProductCostHistories { get; set; } // ProductCostHistory
        public System.Data.Entity.DbSet<Production_ProductDescription> Production_ProductDescriptions { get; set; } // ProductDescription
        public System.Data.Entity.DbSet<Production_ProductDocument> Production_ProductDocuments { get; set; } // ProductDocument
        public System.Data.Entity.DbSet<Production_ProductInventory> Production_ProductInventories { get; set; } // ProductInventory
        public System.Data.Entity.DbSet<Production_ProductListPriceHistory> Production_ProductListPriceHistories { get; set; } // ProductListPriceHistory
        public System.Data.Entity.DbSet<Production_ProductModel> Production_ProductModels { get; set; } // ProductModel
        public System.Data.Entity.DbSet<Production_ProductModelIllustration> Production_ProductModelIllustrations { get; set; } // ProductModelIllustration
        public System.Data.Entity.DbSet<Production_ProductModelProductDescriptionCulture> Production_ProductModelProductDescriptionCultures { get; set; } // ProductModelProductDescriptionCulture
        public System.Data.Entity.DbSet<Production_ProductPhoto> Production_ProductPhotoes { get; set; } // ProductPhoto
        public System.Data.Entity.DbSet<Production_ProductProductPhoto> Production_ProductProductPhotoes { get; set; } // ProductProductPhoto
        public System.Data.Entity.DbSet<Production_ProductReview> Production_ProductReviews { get; set; } // ProductReview
        public System.Data.Entity.DbSet<Production_ProductSubcategory> Production_ProductSubcategories { get; set; } // ProductSubcategory
        public System.Data.Entity.DbSet<Production_ScrapReason> Production_ScrapReasons { get; set; } // ScrapReason
        public System.Data.Entity.DbSet<Production_TransactionHistory> Production_TransactionHistories { get; set; } // TransactionHistory
        public System.Data.Entity.DbSet<Production_TransactionHistoryArchive> Production_TransactionHistoryArchives { get; set; } // TransactionHistoryArchive
        public System.Data.Entity.DbSet<Production_UnitMeasure> Production_UnitMeasures { get; set; } // UnitMeasure
        public System.Data.Entity.DbSet<Production_WorkOrder> Production_WorkOrders { get; set; } // WorkOrder
        public System.Data.Entity.DbSet<Production_WorkOrderRouting> Production_WorkOrderRoutings { get; set; } // WorkOrderRouting
        public System.Data.Entity.DbSet<Purchasing_ProductVendor> Purchasing_ProductVendors { get; set; } // ProductVendor
        public System.Data.Entity.DbSet<Purchasing_PurchaseOrderDetail> Purchasing_PurchaseOrderDetails { get; set; } // PurchaseOrderDetail
        public System.Data.Entity.DbSet<Purchasing_PurchaseOrderHeader> Purchasing_PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader
        public System.Data.Entity.DbSet<Purchasing_ShipMethod> Purchasing_ShipMethods { get; set; } // ShipMethod
        public System.Data.Entity.DbSet<Purchasing_Vendor> Purchasing_Vendors { get; set; } // Vendor
        public System.Data.Entity.DbSet<Sales_CountryRegionCurrency> Sales_CountryRegionCurrencies { get; set; } // CountryRegionCurrency
        public System.Data.Entity.DbSet<Sales_CreditCard> Sales_CreditCards { get; set; } // CreditCard
        public System.Data.Entity.DbSet<Sales_Currency> Sales_Currencies { get; set; } // Currency
        public System.Data.Entity.DbSet<Sales_CurrencyRate> Sales_CurrencyRates { get; set; } // CurrencyRate
        public System.Data.Entity.DbSet<Sales_Customer> Sales_Customers { get; set; } // Customer
        public System.Data.Entity.DbSet<Sales_PersonCreditCard> Sales_PersonCreditCards { get; set; } // PersonCreditCard
        public System.Data.Entity.DbSet<Sales_SalesOrderDetail> Sales_SalesOrderDetails { get; set; } // SalesOrderDetail
        public System.Data.Entity.DbSet<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader
        public System.Data.Entity.DbSet<Sales_SalesOrderHeaderSalesReason> Sales_SalesOrderHeaderSalesReasons { get; set; } // SalesOrderHeaderSalesReason
        public System.Data.Entity.DbSet<Sales_SalesPerson> Sales_SalesPersons { get; set; } // SalesPerson
        public System.Data.Entity.DbSet<Sales_SalesPersonQuotaHistory> Sales_SalesPersonQuotaHistories { get; set; } // SalesPersonQuotaHistory
        public System.Data.Entity.DbSet<Sales_SalesReason> Sales_SalesReasons { get; set; } // SalesReason
        public System.Data.Entity.DbSet<Sales_SalesTaxRate> Sales_SalesTaxRates { get; set; } // SalesTaxRate
        public System.Data.Entity.DbSet<Sales_SalesTerritory> Sales_SalesTerritories { get; set; } // SalesTerritory
        public System.Data.Entity.DbSet<Sales_SalesTerritoryHistory> Sales_SalesTerritoryHistories { get; set; } // SalesTerritoryHistory
        public System.Data.Entity.DbSet<Sales_ShoppingCartItem> Sales_ShoppingCartItems { get; set; } // ShoppingCartItem
        public System.Data.Entity.DbSet<Sales_SpecialOffer> Sales_SpecialOffers { get; set; } // SpecialOffer
        public System.Data.Entity.DbSet<Sales_SpecialOfferProduct> Sales_SpecialOfferProducts { get; set; } // SpecialOfferProduct
        public System.Data.Entity.DbSet<Sales_Store> Sales_Stores { get; set; } // Store

        static AdventureworksDBContext()
        {
            System.Data.Entity.Database.SetInitializer<AdventureworksDBContext>(null);
        }

        public AdventureworksDBContext()
            : base("Name=AdventureworksDB")
        {
        }

        public AdventureworksDBContext(string connectionString)
            : base(connectionString)
        {
        }

        public AdventureworksDBContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public AdventureworksDBContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public AdventureworksDBContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AwBuildVersionConfiguration());
            modelBuilder.Configurations.Add(new DatabaseLogConfiguration());
            modelBuilder.Configurations.Add(new ErrorLogConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_DepartmentConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_EmployeeConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_EmployeeDepartmentHistoryConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_EmployeePayHistoryConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_JobCandidateConfiguration());
            modelBuilder.Configurations.Add(new HumanResources_ShiftConfiguration());
            modelBuilder.Configurations.Add(new Person_AddressConfiguration());
            modelBuilder.Configurations.Add(new Person_AddressTypeConfiguration());
            modelBuilder.Configurations.Add(new Person_BusinessEntityConfiguration());
            modelBuilder.Configurations.Add(new Person_BusinessEntityAddressConfiguration());
            modelBuilder.Configurations.Add(new Person_BusinessEntityContactConfiguration());
            modelBuilder.Configurations.Add(new Person_ContactTypeConfiguration());
            modelBuilder.Configurations.Add(new Person_CountryRegionConfiguration());
            modelBuilder.Configurations.Add(new Person_EmailAddressConfiguration());
            modelBuilder.Configurations.Add(new Person_PasswordConfiguration());
            modelBuilder.Configurations.Add(new Person_PersonConfiguration());
            modelBuilder.Configurations.Add(new Person_PersonPhoneConfiguration());
            modelBuilder.Configurations.Add(new Person_PhoneNumberTypeConfiguration());
            modelBuilder.Configurations.Add(new Person_StateProvinceConfiguration());
            modelBuilder.Configurations.Add(new Production_BillOfMaterialConfiguration());
            modelBuilder.Configurations.Add(new Production_CultureConfiguration());
            modelBuilder.Configurations.Add(new Production_DocumentConfiguration());
            modelBuilder.Configurations.Add(new Production_IllustrationConfiguration());
            modelBuilder.Configurations.Add(new Production_LocationConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductCategoryConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductCostHistoryConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductDescriptionConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductDocumentConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductInventoryConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductListPriceHistoryConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductModelConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductModelIllustrationConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductModelProductDescriptionCultureConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductPhotoConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductProductPhotoConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductReviewConfiguration());
            modelBuilder.Configurations.Add(new Production_ProductSubcategoryConfiguration());
            modelBuilder.Configurations.Add(new Production_ScrapReasonConfiguration());
            modelBuilder.Configurations.Add(new Production_TransactionHistoryConfiguration());
            modelBuilder.Configurations.Add(new Production_TransactionHistoryArchiveConfiguration());
            modelBuilder.Configurations.Add(new Production_UnitMeasureConfiguration());
            modelBuilder.Configurations.Add(new Production_WorkOrderConfiguration());
            modelBuilder.Configurations.Add(new Production_WorkOrderRoutingConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_ProductVendorConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderDetailConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderHeaderConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_ShipMethodConfiguration());
            modelBuilder.Configurations.Add(new Purchasing_VendorConfiguration());
            modelBuilder.Configurations.Add(new Sales_CountryRegionCurrencyConfiguration());
            modelBuilder.Configurations.Add(new Sales_CreditCardConfiguration());
            modelBuilder.Configurations.Add(new Sales_CurrencyConfiguration());
            modelBuilder.Configurations.Add(new Sales_CurrencyRateConfiguration());
            modelBuilder.Configurations.Add(new Sales_CustomerConfiguration());
            modelBuilder.Configurations.Add(new Sales_PersonCreditCardConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesOrderDetailConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderSalesReasonConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesPersonConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesPersonQuotaHistoryConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesReasonConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesTaxRateConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryConfiguration());
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryHistoryConfiguration());
            modelBuilder.Configurations.Add(new Sales_ShoppingCartItemConfiguration());
            modelBuilder.Configurations.Add(new Sales_SpecialOfferConfiguration());
            modelBuilder.Configurations.Add(new Sales_SpecialOfferProductConfiguration());
            modelBuilder.Configurations.Add(new Sales_StoreConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AwBuildVersionConfiguration(schema));
            modelBuilder.Configurations.Add(new DatabaseLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ErrorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_DepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_EmployeeConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_EmployeeDepartmentHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_EmployeePayHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_JobCandidateConfiguration(schema));
            modelBuilder.Configurations.Add(new HumanResources_ShiftConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_AddressTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_BusinessEntityConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_BusinessEntityAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_BusinessEntityContactConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_ContactTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_CountryRegionConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_EmailAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PasswordConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PersonConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PersonPhoneConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_PhoneNumberTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new Person_StateProvinceConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_BillOfMaterialConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_CultureConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_DocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_IllustrationConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_LocationConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductCostHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductDocumentConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductInventoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductListPriceHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductModelConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductModelIllustrationConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductModelProductDescriptionCultureConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductPhotoConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductProductPhotoConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductReviewConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ProductSubcategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_ScrapReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_TransactionHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_TransactionHistoryArchiveConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_UnitMeasureConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_WorkOrderConfiguration(schema));
            modelBuilder.Configurations.Add(new Production_WorkOrderRoutingConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_ProductVendorConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_PurchaseOrderHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_ShipMethodConfiguration(schema));
            modelBuilder.Configurations.Add(new Purchasing_VendorConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_CountryRegionCurrencyConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_CreditCardConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_CurrencyConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_CurrencyRateConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_CustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_PersonCreditCardConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesOrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesOrderHeaderSalesReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesPersonConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesPersonQuotaHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesTaxRateConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SalesTerritoryHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_ShoppingCartItemConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SpecialOfferConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_SpecialOfferProductConfiguration(schema));
            modelBuilder.Configurations.Add(new Sales_StoreConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
        public System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return UspGetBillOfMaterials(startProductId, checkDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate, out int procResult)
        {
            var startProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startProductId.HasValue)
                startProductIdParam.Value = System.DBNull.Value;

            var checkDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CheckDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetBillOfMaterialsReturnModel>("EXEC @procResult = [dbo].[uspGetBillOfMaterials] @StartProductID, @CheckDate", startProductIdParam, checkDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel>> UspGetBillOfMaterialsAsync(int? startProductId, System.DateTime? checkDate)
        {
            var startProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startProductId.HasValue)
                startProductIdParam.Value = System.DBNull.Value;

            var checkDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CheckDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetBillOfMaterialsReturnModel>("EXEC [dbo].[uspGetBillOfMaterials] @StartProductID, @CheckDate", startProductIdParam, checkDateParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId)
        {
            int procResult;
            return UspGetEmployeeManagers(businessEntityId, out procResult);
        }

        public System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId, out int procResult)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetEmployeeManagersReturnModel>("EXEC @procResult = [dbo].[uspGetEmployeeManagers] @BusinessEntityID", businessEntityIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetEmployeeManagersReturnModel>> UspGetEmployeeManagersAsync(int? businessEntityId)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetEmployeeManagersReturnModel>("EXEC [dbo].[uspGetEmployeeManagers] @BusinessEntityID", businessEntityIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId)
        {
            int procResult;
            return UspGetManagerEmployees(businessEntityId, out procResult);
        }

        public System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId, out int procResult)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetManagerEmployeesReturnModel>("EXEC @procResult = [dbo].[uspGetManagerEmployees] @BusinessEntityID", businessEntityIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetManagerEmployeesReturnModel>> UspGetManagerEmployeesAsync(int? businessEntityId)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetManagerEmployeesReturnModel>("EXEC [dbo].[uspGetManagerEmployees] @BusinessEntityID", businessEntityIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return UspGetWhereUsedProductId(startProductId, checkDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate, out int procResult)
        {
            var startProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startProductId.HasValue)
                startProductIdParam.Value = System.DBNull.Value;

            var checkDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CheckDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<UspGetWhereUsedProductIdReturnModel>("EXEC @procResult = [dbo].[uspGetWhereUsedProductID] @StartProductID, @CheckDate", startProductIdParam, checkDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel>> UspGetWhereUsedProductIdAsync(int? startProductId, System.DateTime? checkDate)
        {
            var startProductIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@StartProductID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = startProductId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!startProductId.HasValue)
                startProductIdParam.Value = System.DBNull.Value;

            var checkDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CheckDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = checkDate.GetValueOrDefault() };
            if (!checkDate.HasValue)
                checkDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<UspGetWhereUsedProductIdReturnModel>("EXEC [dbo].[uspGetWhereUsedProductID] @StartProductID, @CheckDate", startProductIdParam, checkDateParam).ToListAsync();

            return procResultData;
        }

        public int UspLogError(out int? errorLogId)
        {
            var errorLogIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ErrorLogID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspLogError] @ErrorLogID OUTPUT", errorLogIdParam, procResultParam);
            if (IsSqlParameterNull(errorLogIdParam))
                errorLogId = null;
            else
                errorLogId = (int) errorLogIdParam.Value;
 
            return (int) procResultParam.Value;
        }

        public int UspPrintError()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspPrintError] ", procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int UspSearchCandidateResumes(string searchString, bool? useInflectional, bool? useThesaurus, int? language)
        {
            var searchStringParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@searchString", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = searchString, Size = 1000 };
            if (searchStringParam.Value == null)
                searchStringParam.Value = System.DBNull.Value;

            var useInflectionalParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@useInflectional", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = useInflectional.GetValueOrDefault() };
            if (!useInflectional.HasValue)
                useInflectionalParam.Value = System.DBNull.Value;

            var useThesaurusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@useThesaurus", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = useThesaurus.GetValueOrDefault() };
            if (!useThesaurus.HasValue)
                useThesaurusParam.Value = System.DBNull.Value;

            var languageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@language", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = language.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!language.HasValue)
                languageParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[uspSearchCandidateResumes] @searchString, @useInflectional, @useThesaurus, @language", searchStringParam, useInflectionalParam, useThesaurusParam, languageParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int HumanResources_UspUpdateEmployeeHireInfo(int? businessEntityId, string jobTitle, System.DateTime? hireDate, System.DateTime? rateChangeDate, decimal? rate, byte? payFrequency, bool? currentFlag)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var jobTitleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@JobTitle", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = jobTitle, Size = 50 };
            if (jobTitleParam.Value == null)
                jobTitleParam.Value = System.DBNull.Value;

            var hireDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@HireDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = hireDate.GetValueOrDefault() };
            if (!hireDate.HasValue)
                hireDateParam.Value = System.DBNull.Value;

            var rateChangeDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@RateChangeDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = rateChangeDate.GetValueOrDefault() };
            if (!rateChangeDate.HasValue)
                rateChangeDateParam.Value = System.DBNull.Value;

            var rateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Rate", SqlDbType = System.Data.SqlDbType.Money, Direction = System.Data.ParameterDirection.Input, Value = rate.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!rate.HasValue)
                rateParam.Value = System.DBNull.Value;

            var payFrequencyParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@PayFrequency", SqlDbType = System.Data.SqlDbType.TinyInt, Direction = System.Data.ParameterDirection.Input, Value = payFrequency.GetValueOrDefault(), Precision = 3, Scale = 0 };
            if (!payFrequency.HasValue)
                payFrequencyParam.Value = System.DBNull.Value;

            var currentFlagParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentFlag", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = currentFlag.GetValueOrDefault() };
            if (!currentFlag.HasValue)
                currentFlagParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [HumanResources].[uspUpdateEmployeeHireInfo] @BusinessEntityID, @JobTitle, @HireDate, @RateChangeDate, @Rate, @PayFrequency, @CurrentFlag", businessEntityIdParam, jobTitleParam, hireDateParam, rateChangeDateParam, rateParam, payFrequencyParam, currentFlagParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int HumanResources_UspUpdateEmployeeLogin(int? businessEntityId, System.Data.Entity.Hierarchy.HierarchyId organizationNode, string loginId, string jobTitle, System.DateTime? hireDate, bool? currentFlag)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var organizationNodeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@OrganizationNode", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = organizationNode, Size = 892 };
            if (organizationNodeParam.Value == null)
                organizationNodeParam.Value = System.DBNull.Value;

            var loginIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@LoginID", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = loginId, Size = 256 };
            if (loginIdParam.Value == null)
                loginIdParam.Value = System.DBNull.Value;

            var jobTitleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@JobTitle", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = jobTitle, Size = 50 };
            if (jobTitleParam.Value == null)
                jobTitleParam.Value = System.DBNull.Value;

            var hireDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@HireDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = hireDate.GetValueOrDefault() };
            if (!hireDate.HasValue)
                hireDateParam.Value = System.DBNull.Value;

            var currentFlagParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@CurrentFlag", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = currentFlag.GetValueOrDefault() };
            if (!currentFlag.HasValue)
                currentFlagParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [HumanResources].[uspUpdateEmployeeLogin] @BusinessEntityID, @OrganizationNode, @LoginID, @JobTitle, @HireDate, @CurrentFlag", businessEntityIdParam, organizationNodeParam, loginIdParam, jobTitleParam, hireDateParam, currentFlagParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int HumanResources_UspUpdateEmployeePersonalInfo(int? businessEntityId, string nationalIdNumber, System.DateTime? birthDate, string maritalStatus, string gender)
        {
            var businessEntityIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BusinessEntityID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = businessEntityId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!businessEntityId.HasValue)
                businessEntityIdParam.Value = System.DBNull.Value;

            var nationalIdNumberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@NationalIDNumber", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = nationalIdNumber, Size = 15 };
            if (nationalIdNumberParam.Value == null)
                nationalIdNumberParam.Value = System.DBNull.Value;

            var birthDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BirthDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = birthDate.GetValueOrDefault() };
            if (!birthDate.HasValue)
                birthDateParam.Value = System.DBNull.Value;

            var maritalStatusParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@MaritalStatus", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = maritalStatus, Size = 1 };
            if (maritalStatusParam.Value == null)
                maritalStatusParam.Value = System.DBNull.Value;

            var genderParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Gender", SqlDbType = System.Data.SqlDbType.NChar, Direction = System.Data.ParameterDirection.Input, Value = gender, Size = 1 };
            if (genderParam.Value == null)
                genderParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [HumanResources].[uspUpdateEmployeePersonalInfo] @BusinessEntityID, @NationalIDNumber, @BirthDate, @MaritalStatus, @Gender", businessEntityIdParam, nationalIdNumberParam, birthDateParam, maritalStatusParam, genderParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeAdventureworksDBContext : IAdventureworksDBContext
    {
        public System.Data.Entity.DbSet<AwBuildVersion> AwBuildVersions { get; set; }
        public System.Data.Entity.DbSet<DatabaseLog> DatabaseLogs { get; set; }
        public System.Data.Entity.DbSet<ErrorLog> ErrorLogs { get; set; }
        public System.Data.Entity.DbSet<HumanResources_Department> HumanResources_Departments { get; set; }
        public System.Data.Entity.DbSet<HumanResources_Employee> HumanResources_Employees { get; set; }
        public System.Data.Entity.DbSet<HumanResources_EmployeeDepartmentHistory> HumanResources_EmployeeDepartmentHistories { get; set; }
        public System.Data.Entity.DbSet<HumanResources_EmployeePayHistory> HumanResources_EmployeePayHistories { get; set; }
        public System.Data.Entity.DbSet<HumanResources_JobCandidate> HumanResources_JobCandidates { get; set; }
        public System.Data.Entity.DbSet<HumanResources_Shift> HumanResources_Shifts { get; set; }
        public System.Data.Entity.DbSet<Person_Address> Person_Addresses { get; set; }
        public System.Data.Entity.DbSet<Person_AddressType> Person_AddressTypes { get; set; }
        public System.Data.Entity.DbSet<Person_BusinessEntity> Person_BusinessEntities { get; set; }
        public System.Data.Entity.DbSet<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; }
        public System.Data.Entity.DbSet<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; }
        public System.Data.Entity.DbSet<Person_ContactType> Person_ContactTypes { get; set; }
        public System.Data.Entity.DbSet<Person_CountryRegion> Person_CountryRegions { get; set; }
        public System.Data.Entity.DbSet<Person_EmailAddress> Person_EmailAddresses { get; set; }
        public System.Data.Entity.DbSet<Person_Password> Person_Passwords { get; set; }
        public System.Data.Entity.DbSet<Person_Person> Person_People { get; set; }
        public System.Data.Entity.DbSet<Person_PersonPhone> Person_PersonPhones { get; set; }
        public System.Data.Entity.DbSet<Person_PhoneNumberType> Person_PhoneNumberTypes { get; set; }
        public System.Data.Entity.DbSet<Person_StateProvince> Person_StateProvinces { get; set; }
        public System.Data.Entity.DbSet<Production_BillOfMaterial> Production_BillOfMaterials { get; set; }
        public System.Data.Entity.DbSet<Production_Culture> Production_Cultures { get; set; }
        public System.Data.Entity.DbSet<Production_Document> Production_Documents { get; set; }
        public System.Data.Entity.DbSet<Production_Illustration> Production_Illustrations { get; set; }
        public System.Data.Entity.DbSet<Production_Location> Production_Locations { get; set; }
        public System.Data.Entity.DbSet<Production_Product> Production_Products { get; set; }
        public System.Data.Entity.DbSet<Production_ProductCategory> Production_ProductCategories { get; set; }
        public System.Data.Entity.DbSet<Production_ProductCostHistory> Production_ProductCostHistories { get; set; }
        public System.Data.Entity.DbSet<Production_ProductDescription> Production_ProductDescriptions { get; set; }
        public System.Data.Entity.DbSet<Production_ProductDocument> Production_ProductDocuments { get; set; }
        public System.Data.Entity.DbSet<Production_ProductInventory> Production_ProductInventories { get; set; }
        public System.Data.Entity.DbSet<Production_ProductListPriceHistory> Production_ProductListPriceHistories { get; set; }
        public System.Data.Entity.DbSet<Production_ProductModel> Production_ProductModels { get; set; }
        public System.Data.Entity.DbSet<Production_ProductModelIllustration> Production_ProductModelIllustrations { get; set; }
        public System.Data.Entity.DbSet<Production_ProductModelProductDescriptionCulture> Production_ProductModelProductDescriptionCultures { get; set; }
        public System.Data.Entity.DbSet<Production_ProductPhoto> Production_ProductPhotoes { get; set; }
        public System.Data.Entity.DbSet<Production_ProductProductPhoto> Production_ProductProductPhotoes { get; set; }
        public System.Data.Entity.DbSet<Production_ProductReview> Production_ProductReviews { get; set; }
        public System.Data.Entity.DbSet<Production_ProductSubcategory> Production_ProductSubcategories { get; set; }
        public System.Data.Entity.DbSet<Production_ScrapReason> Production_ScrapReasons { get; set; }
        public System.Data.Entity.DbSet<Production_TransactionHistory> Production_TransactionHistories { get; set; }
        public System.Data.Entity.DbSet<Production_TransactionHistoryArchive> Production_TransactionHistoryArchives { get; set; }
        public System.Data.Entity.DbSet<Production_UnitMeasure> Production_UnitMeasures { get; set; }
        public System.Data.Entity.DbSet<Production_WorkOrder> Production_WorkOrders { get; set; }
        public System.Data.Entity.DbSet<Production_WorkOrderRouting> Production_WorkOrderRoutings { get; set; }
        public System.Data.Entity.DbSet<Purchasing_ProductVendor> Purchasing_ProductVendors { get; set; }
        public System.Data.Entity.DbSet<Purchasing_PurchaseOrderDetail> Purchasing_PurchaseOrderDetails { get; set; }
        public System.Data.Entity.DbSet<Purchasing_PurchaseOrderHeader> Purchasing_PurchaseOrderHeaders { get; set; }
        public System.Data.Entity.DbSet<Purchasing_ShipMethod> Purchasing_ShipMethods { get; set; }
        public System.Data.Entity.DbSet<Purchasing_Vendor> Purchasing_Vendors { get; set; }
        public System.Data.Entity.DbSet<Sales_CountryRegionCurrency> Sales_CountryRegionCurrencies { get; set; }
        public System.Data.Entity.DbSet<Sales_CreditCard> Sales_CreditCards { get; set; }
        public System.Data.Entity.DbSet<Sales_Currency> Sales_Currencies { get; set; }
        public System.Data.Entity.DbSet<Sales_CurrencyRate> Sales_CurrencyRates { get; set; }
        public System.Data.Entity.DbSet<Sales_Customer> Sales_Customers { get; set; }
        public System.Data.Entity.DbSet<Sales_PersonCreditCard> Sales_PersonCreditCards { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesOrderDetail> Sales_SalesOrderDetails { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesOrderHeaderSalesReason> Sales_SalesOrderHeaderSalesReasons { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesPerson> Sales_SalesPersons { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesPersonQuotaHistory> Sales_SalesPersonQuotaHistories { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesReason> Sales_SalesReasons { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesTaxRate> Sales_SalesTaxRates { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesTerritory> Sales_SalesTerritories { get; set; }
        public System.Data.Entity.DbSet<Sales_SalesTerritoryHistory> Sales_SalesTerritoryHistories { get; set; }
        public System.Data.Entity.DbSet<Sales_ShoppingCartItem> Sales_ShoppingCartItems { get; set; }
        public System.Data.Entity.DbSet<Sales_SpecialOffer> Sales_SpecialOffers { get; set; }
        public System.Data.Entity.DbSet<Sales_SpecialOfferProduct> Sales_SpecialOfferProducts { get; set; }
        public System.Data.Entity.DbSet<Sales_Store> Sales_Stores { get; set; }

        public FakeAdventureworksDBContext()
        {
            AwBuildVersions = new FakeDbSet<AwBuildVersion>("SystemInformationId");
            DatabaseLogs = new FakeDbSet<DatabaseLog>("DatabaseLogId");
            ErrorLogs = new FakeDbSet<ErrorLog>("ErrorLogId");
            HumanResources_Departments = new FakeDbSet<HumanResources_Department>("DepartmentId");
            HumanResources_Employees = new FakeDbSet<HumanResources_Employee>("BusinessEntityId");
            HumanResources_EmployeeDepartmentHistories = new FakeDbSet<HumanResources_EmployeeDepartmentHistory>("BusinessEntityId", "StartDate", "DepartmentId", "ShiftId");
            HumanResources_EmployeePayHistories = new FakeDbSet<HumanResources_EmployeePayHistory>("BusinessEntityId", "RateChangeDate");
            HumanResources_JobCandidates = new FakeDbSet<HumanResources_JobCandidate>("JobCandidateId");
            HumanResources_Shifts = new FakeDbSet<HumanResources_Shift>("ShiftId");
            Person_Addresses = new FakeDbSet<Person_Address>("AddressId");
            Person_AddressTypes = new FakeDbSet<Person_AddressType>("AddressTypeId");
            Person_BusinessEntities = new FakeDbSet<Person_BusinessEntity>("BusinessEntityId");
            Person_BusinessEntityAddresses = new FakeDbSet<Person_BusinessEntityAddress>("BusinessEntityId", "AddressId", "AddressTypeId");
            Person_BusinessEntityContacts = new FakeDbSet<Person_BusinessEntityContact>("BusinessEntityId", "PersonId", "ContactTypeId");
            Person_ContactTypes = new FakeDbSet<Person_ContactType>("ContactTypeId");
            Person_CountryRegions = new FakeDbSet<Person_CountryRegion>("CountryRegionCode");
            Person_EmailAddresses = new FakeDbSet<Person_EmailAddress>("BusinessEntityId", "EmailAddressId");
            Person_Passwords = new FakeDbSet<Person_Password>("BusinessEntityId");
            Person_People = new FakeDbSet<Person_Person>("BusinessEntityId");
            Person_PersonPhones = new FakeDbSet<Person_PersonPhone>("BusinessEntityId", "PhoneNumber", "PhoneNumberTypeId");
            Person_PhoneNumberTypes = new FakeDbSet<Person_PhoneNumberType>("PhoneNumberTypeId");
            Person_StateProvinces = new FakeDbSet<Person_StateProvince>("StateProvinceId");
            Production_BillOfMaterials = new FakeDbSet<Production_BillOfMaterial>("BillOfMaterialsId");
            Production_Cultures = new FakeDbSet<Production_Culture>("CultureId");
            Production_Documents = new FakeDbSet<Production_Document>("DocumentNode");
            Production_Illustrations = new FakeDbSet<Production_Illustration>("IllustrationId");
            Production_Locations = new FakeDbSet<Production_Location>("LocationId");
            Production_Products = new FakeDbSet<Production_Product>("ProductId");
            Production_ProductCategories = new FakeDbSet<Production_ProductCategory>("ProductCategoryId");
            Production_ProductCostHistories = new FakeDbSet<Production_ProductCostHistory>("ProductId", "StartDate");
            Production_ProductDescriptions = new FakeDbSet<Production_ProductDescription>("ProductDescriptionId");
            Production_ProductDocuments = new FakeDbSet<Production_ProductDocument>("ProductId", "DocumentNode");
            Production_ProductInventories = new FakeDbSet<Production_ProductInventory>("ProductId", "LocationId");
            Production_ProductListPriceHistories = new FakeDbSet<Production_ProductListPriceHistory>("ProductId", "StartDate");
            Production_ProductModels = new FakeDbSet<Production_ProductModel>("ProductModelId");
            Production_ProductModelIllustrations = new FakeDbSet<Production_ProductModelIllustration>("ProductModelId", "IllustrationId");
            Production_ProductModelProductDescriptionCultures = new FakeDbSet<Production_ProductModelProductDescriptionCulture>("ProductModelId", "ProductDescriptionId", "CultureId");
            Production_ProductPhotoes = new FakeDbSet<Production_ProductPhoto>("ProductPhotoId");
            Production_ProductProductPhotoes = new FakeDbSet<Production_ProductProductPhoto>("ProductId", "ProductPhotoId");
            Production_ProductReviews = new FakeDbSet<Production_ProductReview>("ProductReviewId");
            Production_ProductSubcategories = new FakeDbSet<Production_ProductSubcategory>("ProductSubcategoryId");
            Production_ScrapReasons = new FakeDbSet<Production_ScrapReason>("ScrapReasonId");
            Production_TransactionHistories = new FakeDbSet<Production_TransactionHistory>("TransactionId");
            Production_TransactionHistoryArchives = new FakeDbSet<Production_TransactionHistoryArchive>("TransactionId");
            Production_UnitMeasures = new FakeDbSet<Production_UnitMeasure>("UnitMeasureCode");
            Production_WorkOrders = new FakeDbSet<Production_WorkOrder>("WorkOrderId");
            Production_WorkOrderRoutings = new FakeDbSet<Production_WorkOrderRouting>("WorkOrderId", "ProductId", "OperationSequence");
            Purchasing_ProductVendors = new FakeDbSet<Purchasing_ProductVendor>("ProductId", "BusinessEntityId");
            Purchasing_PurchaseOrderDetails = new FakeDbSet<Purchasing_PurchaseOrderDetail>("PurchaseOrderId", "PurchaseOrderDetailId");
            Purchasing_PurchaseOrderHeaders = new FakeDbSet<Purchasing_PurchaseOrderHeader>("PurchaseOrderId");
            Purchasing_ShipMethods = new FakeDbSet<Purchasing_ShipMethod>("ShipMethodId");
            Purchasing_Vendors = new FakeDbSet<Purchasing_Vendor>("BusinessEntityId");
            Sales_CountryRegionCurrencies = new FakeDbSet<Sales_CountryRegionCurrency>("CountryRegionCode", "CurrencyCode");
            Sales_CreditCards = new FakeDbSet<Sales_CreditCard>("CreditCardId");
            Sales_Currencies = new FakeDbSet<Sales_Currency>("CurrencyCode");
            Sales_CurrencyRates = new FakeDbSet<Sales_CurrencyRate>("CurrencyRateId");
            Sales_Customers = new FakeDbSet<Sales_Customer>("CustomerId");
            Sales_PersonCreditCards = new FakeDbSet<Sales_PersonCreditCard>("BusinessEntityId", "CreditCardId");
            Sales_SalesOrderDetails = new FakeDbSet<Sales_SalesOrderDetail>("SalesOrderId", "SalesOrderDetailId");
            Sales_SalesOrderHeaders = new FakeDbSet<Sales_SalesOrderHeader>("SalesOrderId");
            Sales_SalesOrderHeaderSalesReasons = new FakeDbSet<Sales_SalesOrderHeaderSalesReason>("SalesOrderId", "SalesReasonId");
            Sales_SalesPersons = new FakeDbSet<Sales_SalesPerson>("BusinessEntityId");
            Sales_SalesPersonQuotaHistories = new FakeDbSet<Sales_SalesPersonQuotaHistory>("BusinessEntityId", "QuotaDate");
            Sales_SalesReasons = new FakeDbSet<Sales_SalesReason>("SalesReasonId");
            Sales_SalesTaxRates = new FakeDbSet<Sales_SalesTaxRate>("SalesTaxRateId");
            Sales_SalesTerritories = new FakeDbSet<Sales_SalesTerritory>("TerritoryId");
            Sales_SalesTerritoryHistories = new FakeDbSet<Sales_SalesTerritoryHistory>("BusinessEntityId", "StartDate", "TerritoryId");
            Sales_ShoppingCartItems = new FakeDbSet<Sales_ShoppingCartItem>("ShoppingCartItemId");
            Sales_SpecialOffers = new FakeDbSet<Sales_SpecialOffer>("SpecialOfferId");
            Sales_SpecialOfferProducts = new FakeDbSet<Sales_SpecialOfferProduct>("SpecialOfferId", "ProductId");
            Sales_Stores = new FakeDbSet<Sales_Store>("BusinessEntityId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        // Stored Procedures
        public System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return UspGetBillOfMaterials(startProductId, checkDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel> UspGetBillOfMaterials(int? startProductId, System.DateTime? checkDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetBillOfMaterialsReturnModel>> UspGetBillOfMaterialsAsync(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetBillOfMaterials(startProductId, checkDate, out procResult));
        }

        public System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId)
        {
            int procResult;
            return UspGetEmployeeManagers(businessEntityId, out procResult);
        }

        public System.Collections.Generic.List<UspGetEmployeeManagersReturnModel> UspGetEmployeeManagers(int? businessEntityId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetEmployeeManagersReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetEmployeeManagersReturnModel>> UspGetEmployeeManagersAsync(int? businessEntityId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetEmployeeManagers(businessEntityId, out procResult));
        }

        public System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId)
        {
            int procResult;
            return UspGetManagerEmployees(businessEntityId, out procResult);
        }

        public System.Collections.Generic.List<UspGetManagerEmployeesReturnModel> UspGetManagerEmployees(int? businessEntityId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetManagerEmployeesReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetManagerEmployeesReturnModel>> UspGetManagerEmployeesAsync(int? businessEntityId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetManagerEmployees(businessEntityId, out procResult));
        }

        public System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return UspGetWhereUsedProductId(startProductId, checkDate, out procResult);
        }

        public System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel> UspGetWhereUsedProductId(int? startProductId, System.DateTime? checkDate, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<UspGetWhereUsedProductIdReturnModel>> UspGetWhereUsedProductIdAsync(int? startProductId, System.DateTime? checkDate)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(UspGetWhereUsedProductId(startProductId, checkDate, out procResult));
        }

        public int UspLogError(out int? errorLogId)
        {
            errorLogId = default(int);
 
            return 0;
        }

        public int UspPrintError()
        {
 
            return 0;
        }

        public int UspSearchCandidateResumes(string searchString, bool? useInflectional, bool? useThesaurus, int? language)
        {
 
            return 0;
        }

        public int HumanResources_UspUpdateEmployeeHireInfo(int? businessEntityId, string jobTitle, System.DateTime? hireDate, System.DateTime? rateChangeDate, decimal? rate, byte? payFrequency, bool? currentFlag)
        {
 
            return 0;
        }

        public int HumanResources_UspUpdateEmployeeLogin(int? businessEntityId, System.Data.Entity.Hierarchy.HierarchyId organizationNode, string loginId, string jobTitle, System.DateTime? hireDate, bool? currentFlag)
        {
 
            return 0;
        }

        public int HumanResources_UspUpdateEmployeePersonalInfo(int? businessEntityId, string nationalIdNumber, System.DateTime? birthDate, string maritalStatus, string gender)
        {
 
            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // AWBuildVersion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AwBuildVersion
    {

        ///<summary>
        /// Primary key for AWBuildVersion records.
        ///</summary>
        public byte SystemInformationId { get; set; } // SystemInformationID (Primary key)

        ///<summary>
        /// Version number of the database in 9.yy.mm.dd.00 format.
        ///</summary>
        public string DatabaseVersion { get; set; } // Database Version (length: 25)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime VersionDate { get; set; } // VersionDate

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        public AwBuildVersion()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // DatabaseLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class DatabaseLog
    {

        ///<summary>
        /// Primary key for DatabaseLog records.
        ///</summary>
        public int DatabaseLogId { get; set; } // DatabaseLogID (Primary key)

        ///<summary>
        /// The date and time the DDL change occurred.
        ///</summary>
        public System.DateTime PostTime { get; set; } // PostTime

        ///<summary>
        /// The user who implemented the DDL change.
        ///</summary>
        public string DatabaseUser { get; set; } // DatabaseUser (length: 128)

        ///<summary>
        /// The type of DDL statement that was executed.
        ///</summary>
        public string Event { get; set; } // Event (length: 128)

        ///<summary>
        /// The schema to which the changed object belongs.
        ///</summary>
        public string Schema { get; set; } // Schema (length: 128)

        ///<summary>
        /// The object that was changed by the DDL statment.
        ///</summary>
        public string Object { get; set; } // Object (length: 128)

        ///<summary>
        /// The exact Transact-SQL statement that was executed.
        ///</summary>
        public string Tsql { get; set; } // TSQL

        ///<summary>
        /// The raw XML data generated by database trigger.
        ///</summary>
        public string XmlEvent { get; set; } // XmlEvent
    }

    // ErrorLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ErrorLog
    {

        ///<summary>
        /// Primary key for ErrorLog records.
        ///</summary>
        public int ErrorLogId { get; set; } // ErrorLogID (Primary key)

        ///<summary>
        /// The date and time at which the error occurred.
        ///</summary>
        public System.DateTime ErrorTime { get; set; } // ErrorTime

        ///<summary>
        /// The user who executed the batch in which the error occurred.
        ///</summary>
        public string UserName { get; set; } // UserName (length: 128)

        ///<summary>
        /// The error number of the error that occurred.
        ///</summary>
        public int ErrorNumber { get; set; } // ErrorNumber

        ///<summary>
        /// The severity of the error that occurred.
        ///</summary>
        public int? ErrorSeverity { get; set; } // ErrorSeverity

        ///<summary>
        /// The state number of the error that occurred.
        ///</summary>
        public int? ErrorState { get; set; } // ErrorState

        ///<summary>
        /// The name of the stored procedure or trigger where the error occurred.
        ///</summary>
        public string ErrorProcedure { get; set; } // ErrorProcedure (length: 126)

        ///<summary>
        /// The line number at which the error occurred.
        ///</summary>
        public int? ErrorLine { get; set; } // ErrorLine

        ///<summary>
        /// The message text of the error that occurred.
        ///</summary>
        public string ErrorMessage { get; set; } // ErrorMessage (length: 4000)

        public ErrorLog()
        {
            ErrorTime = System.DateTime.Now;
        }
    }

    // Department
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class HumanResources_Department
    {

        ///<summary>
        /// Primary key for Department records.
        ///</summary>
        public short DepartmentId { get; set; } // DepartmentID (Primary key)

        ///<summary>
        /// Name of the department.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Name of the group to which the department belongs.
        ///</summary>
        public string GroupName { get; set; } // GroupName (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<HumanResources_EmployeeDepartmentHistory> HumanResources_EmployeeDepartmentHistories { get; set; } // Many to many mapping

        public HumanResources_Department()
        {
            ModifiedDate = System.DateTime.Now;
            HumanResources_EmployeeDepartmentHistories = new System.Collections.Generic.List<HumanResources_EmployeeDepartmentHistory>();
        }
    }

    // Employee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class HumanResources_Employee
    {

        ///<summary>
        /// Primary key for Employee records.  Foreign key to BusinessEntity.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Unique national identification number such as a social security number.
        ///</summary>
        public string NationalIdNumber { get; set; } // NationalIDNumber (length: 15)

        ///<summary>
        /// Network login.
        ///</summary>
        public string LoginId { get; set; } // LoginID (length: 256)

        ///<summary>
        /// Where the employee is located in corporate hierarchy.
        ///</summary>
        public System.Data.Entity.Hierarchy.HierarchyId OrganizationNode { get; set; } // OrganizationNode

        ///<summary>
        /// The depth of the employee in the corporate hierarchy.
        ///</summary>
        public short? OrganizationLevel { get; private set; } // OrganizationLevel

        ///<summary>
        /// Work title such as Buyer or Sales Representative.
        ///</summary>
        public string JobTitle { get; set; } // JobTitle (length: 50)

        ///<summary>
        /// Date of birth.
        ///</summary>
        public System.DateTime BirthDate { get; set; } // BirthDate

        ///<summary>
        /// M = Married, S = Single
        ///</summary>
        public string MaritalStatus { get; set; } // MaritalStatus (length: 1)

        ///<summary>
        /// M = Male, F = Female
        ///</summary>
        public string Gender { get; set; } // Gender (length: 1)

        ///<summary>
        /// Employee hired on this date.
        ///</summary>
        public System.DateTime HireDate { get; set; } // HireDate

        ///<summary>
        /// Job classification. 0 = Hourly, not exempt from collective bargaining. 1 = Salaried, exempt from collective bargaining.
        ///</summary>
        public bool SalariedFlag { get; set; } // SalariedFlag

        ///<summary>
        /// Number of available vacation hours.
        ///</summary>
        public short VacationHours { get; set; } // VacationHours

        ///<summary>
        /// Number of available sick leave hours.
        ///</summary>
        public short SickLeaveHours { get; set; } // SickLeaveHours

        ///<summary>
        /// 0 = Inactive, 1 = Active
        ///</summary>
        public bool CurrentFlag { get; set; } // CurrentFlag

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual Sales_SalesPerson Sales_SalesPerson { get; set; } // SalesPerson.FK_SalesPerson_Employee_BusinessEntityID
        public virtual System.Collections.Generic.ICollection<HumanResources_EmployeeDepartmentHistory> HumanResources_EmployeeDepartmentHistories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<HumanResources_EmployeePayHistory> HumanResources_EmployeePayHistories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<HumanResources_JobCandidate> HumanResources_JobCandidates { get; set; } // JobCandidate.FK_JobCandidate_Employee_BusinessEntityID
        public virtual System.Collections.Generic.ICollection<Production_Document> Production_Documents { get; set; } // Document.FK_Document_Employee_Owner
        public virtual System.Collections.Generic.ICollection<Purchasing_PurchaseOrderHeader> Purchasing_PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader.FK_PurchaseOrderHeader_Employee_EmployeeID

        // Foreign keys
        public virtual Person_Person Person_Person { get; set; } // FK_Employee_Person_BusinessEntityID

        public HumanResources_Employee()
        {
            SalariedFlag = true;
            VacationHours = 0;
            SickLeaveHours = 0;
            CurrentFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Production_Documents = new System.Collections.Generic.List<Production_Document>();
            HumanResources_EmployeeDepartmentHistories = new System.Collections.Generic.List<HumanResources_EmployeeDepartmentHistory>();
            HumanResources_EmployeePayHistories = new System.Collections.Generic.List<HumanResources_EmployeePayHistory>();
            HumanResources_JobCandidates = new System.Collections.Generic.List<HumanResources_JobCandidate>();
            Purchasing_PurchaseOrderHeaders = new System.Collections.Generic.List<Purchasing_PurchaseOrderHeader>();
        }
    }

    // EmployeeDepartmentHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class HumanResources_EmployeeDepartmentHistory
    {

        ///<summary>
        /// Employee identification number. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Department in which the employee worked including currently. Foreign key to Department.DepartmentID.
        ///</summary>
        public short DepartmentId { get; set; } // DepartmentID (Primary key)

        ///<summary>
        /// Identifies which 8-hour shift the employee works. Foreign key to Shift.Shift.ID.
        ///</summary>
        public byte ShiftId { get; set; } // ShiftID (Primary key)

        ///<summary>
        /// Date the employee started work in the department.
        ///</summary>
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)

        ///<summary>
        /// Date the employee left the department. NULL = Current department.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual HumanResources_Department HumanResources_Department { get; set; } // FK_EmployeeDepartmentHistory_Department_DepartmentID
        public virtual HumanResources_Employee HumanResources_Employee { get; set; } // FK_EmployeeDepartmentHistory_Employee_BusinessEntityID
        public virtual HumanResources_Shift HumanResources_Shift { get; set; } // FK_EmployeeDepartmentHistory_Shift_ShiftID

        public HumanResources_EmployeeDepartmentHistory()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // EmployeePayHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class HumanResources_EmployeePayHistory
    {

        ///<summary>
        /// Employee identification number. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Date the change in pay is effective
        ///</summary>
        public System.DateTime RateChangeDate { get; set; } // RateChangeDate (Primary key)

        ///<summary>
        /// Salary hourly rate.
        ///</summary>
        public decimal Rate { get; set; } // Rate

        ///<summary>
        /// 1 = Salary received monthly, 2 = Salary received biweekly
        ///</summary>
        public byte PayFrequency { get; set; } // PayFrequency

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual HumanResources_Employee HumanResources_Employee { get; set; } // FK_EmployeePayHistory_Employee_BusinessEntityID

        public HumanResources_EmployeePayHistory()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // JobCandidate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class HumanResources_JobCandidate
    {

        ///<summary>
        /// Primary key for JobCandidate records.
        ///</summary>
        public int JobCandidateId { get; set; } // JobCandidateID (Primary key)

        ///<summary>
        /// Employee identification number if applicant was hired. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        public int? BusinessEntityId { get; set; } // BusinessEntityID

        ///<summary>
        /// Résumé in XML format.
        ///</summary>
        public string Resume { get; set; } // Resume

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual HumanResources_Employee HumanResources_Employee { get; set; } // FK_JobCandidate_Employee_BusinessEntityID

        public HumanResources_JobCandidate()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Shift
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class HumanResources_Shift
    {

        ///<summary>
        /// Primary key for Shift records.
        ///</summary>
        public byte ShiftId { get; set; } // ShiftID (Primary key)

        ///<summary>
        /// Shift description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Shift start time.
        ///</summary>
        public System.TimeSpan StartTime { get; set; } // StartTime

        ///<summary>
        /// Shift end time.
        ///</summary>
        public System.TimeSpan EndTime { get; set; } // EndTime

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<HumanResources_EmployeeDepartmentHistory> HumanResources_EmployeeDepartmentHistories { get; set; } // Many to many mapping

        public HumanResources_Shift()
        {
            ModifiedDate = System.DateTime.Now;
            HumanResources_EmployeeDepartmentHistories = new System.Collections.Generic.List<HumanResources_EmployeeDepartmentHistory>();
        }
    }

    // Address
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_Address
    {

        ///<summary>
        /// Primary key for Address records.
        ///</summary>
        public int AddressId { get; set; } // AddressID (Primary key)

        ///<summary>
        /// First street address line.
        ///</summary>
        public string AddressLine1 { get; set; } // AddressLine1 (length: 60)

        ///<summary>
        /// Second street address line.
        ///</summary>
        public string AddressLine2 { get; set; } // AddressLine2 (length: 60)

        ///<summary>
        /// Name of the city.
        ///</summary>
        public string City { get; set; } // City (length: 30)

        ///<summary>
        /// Unique identification number for the state or province. Foreign key to StateProvince table.
        ///</summary>
        public int StateProvinceId { get; set; } // StateProvinceID

        ///<summary>
        /// Postal code for the street address.
        ///</summary>
        public string PostalCode { get; set; } // PostalCode (length: 15)

        ///<summary>
        /// Latitude and longitude of this address.
        ///</summary>
        public System.Data.Entity.Spatial.DbGeography SpatialLocation { get; set; } // SpatialLocation

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> BillToAddress { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Address_BillToAddressID
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> ShipToAddress { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Address_ShipToAddressID

        // Foreign keys
        public virtual Person_StateProvince Person_StateProvince { get; set; } // FK_Address_StateProvince_StateProvinceID

        public Person_Address()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityAddresses = new System.Collections.Generic.List<Person_BusinessEntityAddress>();
            BillToAddress = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
            ShipToAddress = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
        }
    }

    // AddressType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_AddressType
    {

        ///<summary>
        /// Primary key for AddressType records.
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeID (Primary key)

        ///<summary>
        /// Address type description. For example, Billing, Home, or Shipping.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // Many to many mapping

        public Person_AddressType()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityAddresses = new System.Collections.Generic.List<Person_BusinessEntityAddress>();
        }
    }

    // BusinessEntity
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_BusinessEntity
    {

        ///<summary>
        /// Primary key for all customers, vendors, and employees.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual Person_Person Person_Person { get; set; } // Person.FK_Person_BusinessEntity_BusinessEntityID
        public virtual Purchasing_Vendor Purchasing_Vendor { get; set; } // Vendor.FK_Vendor_BusinessEntity_BusinessEntityID
        public virtual Sales_Store Sales_Store { get; set; } // Store.FK_Store_BusinessEntity_BusinessEntityID
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityAddress> Person_BusinessEntityAddresses { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // Many to many mapping

        public Person_BusinessEntity()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityAddresses = new System.Collections.Generic.List<Person_BusinessEntityAddress>();
            Person_BusinessEntityContacts = new System.Collections.Generic.List<Person_BusinessEntityContact>();
        }
    }

    // BusinessEntityAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_BusinessEntityAddress
    {

        ///<summary>
        /// Primary key. Foreign key to BusinessEntity.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Address.AddressID.
        ///</summary>
        public int AddressId { get; set; } // AddressID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to AddressType.AddressTypeID.
        ///</summary>
        public int AddressTypeId { get; set; } // AddressTypeID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person_Address Person_Address { get; set; } // FK_BusinessEntityAddress_Address_AddressID
        public virtual Person_AddressType Person_AddressType { get; set; } // FK_BusinessEntityAddress_AddressType_AddressTypeID
        public virtual Person_BusinessEntity Person_BusinessEntity { get; set; } // FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID

        public Person_BusinessEntityAddress()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // BusinessEntityContact
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_BusinessEntityContact
    {

        ///<summary>
        /// Primary key. Foreign key to BusinessEntity.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Person.BusinessEntityID.
        ///</summary>
        public int PersonId { get; set; } // PersonID (Primary key)

        ///<summary>
        /// Primary key.  Foreign key to ContactType.ContactTypeID.
        ///</summary>
        public int ContactTypeId { get; set; } // ContactTypeID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person_BusinessEntity Person_BusinessEntity { get; set; } // FK_BusinessEntityContact_BusinessEntity_BusinessEntityID
        public virtual Person_ContactType Person_ContactType { get; set; } // FK_BusinessEntityContact_ContactType_ContactTypeID
        public virtual Person_Person Person_Person { get; set; } // FK_BusinessEntityContact_Person_PersonID

        public Person_BusinessEntityContact()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ContactType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_ContactType
    {

        ///<summary>
        /// Primary key for ContactType records.
        ///</summary>
        public int ContactTypeId { get; set; } // ContactTypeID (Primary key)

        ///<summary>
        /// Contact type description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // Many to many mapping

        public Person_ContactType()
        {
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityContacts = new System.Collections.Generic.List<Person_BusinessEntityContact>();
        }
    }

    // CountryRegion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_CountryRegion
    {

        ///<summary>
        /// ISO standard code for countries and regions.
        ///</summary>
        public string CountryRegionCode { get; set; } // CountryRegionCode (Primary key) (length: 3)

        ///<summary>
        /// Country or region name.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Person_StateProvince> Person_StateProvinces { get; set; } // StateProvince.FK_StateProvince_CountryRegion_CountryRegionCode
        public virtual System.Collections.Generic.ICollection<Sales_CountryRegionCurrency> Sales_CountryRegionCurrencies { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Sales_SalesTerritory> Sales_SalesTerritories { get; set; } // SalesTerritory.FK_SalesTerritory_CountryRegion_CountryRegionCode

        public Person_CountryRegion()
        {
            ModifiedDate = System.DateTime.Now;
            Sales_CountryRegionCurrencies = new System.Collections.Generic.List<Sales_CountryRegionCurrency>();
            Sales_SalesTerritories = new System.Collections.Generic.List<Sales_SalesTerritory>();
            Person_StateProvinces = new System.Collections.Generic.List<Person_StateProvince>();
        }
    }

    // EmailAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_EmailAddress
    {

        ///<summary>
        /// Primary key. Person associated with this email address.  Foreign key to Person.BusinessEntityID
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. ID of this email address.
        ///</summary>
        public int EmailAddressId { get; set; } // EmailAddressID (Primary key)

        ///<summary>
        /// E-mail address for the person.
        ///</summary>
        public string EmailAddress { get; set; } // EmailAddress (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person_Person Person_Person { get; set; } // FK_EmailAddress_Person_BusinessEntityID

        public Person_EmailAddress()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Password
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_Password
    {
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Password for the e-mail account.
        ///</summary>
        public string PasswordHash { get; set; } // PasswordHash (length: 128)

        ///<summary>
        /// Random value concatenated with the password string before the password is hashed.
        ///</summary>
        public string PasswordSalt { get; set; } // PasswordSalt (length: 10)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person_Person Person_Person { get; set; } // FK_Password_Person_BusinessEntityID

        public Person_Password()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Person
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_Person
    {

        ///<summary>
        /// Primary key for Person records.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact
        ///</summary>
        public string PersonType { get; set; } // PersonType (length: 2)

        ///<summary>
        /// 0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.
        ///</summary>
        public bool NameStyle { get; set; } // NameStyle

        ///<summary>
        /// A courtesy title. For example, Mr. or Ms.
        ///</summary>
        public string Title { get; set; } // Title (length: 8)

        ///<summary>
        /// First name of the person.
        ///</summary>
        public string FirstName { get; set; } // FirstName (length: 50)

        ///<summary>
        /// Middle name or middle initial of the person.
        ///</summary>
        public string MiddleName { get; set; } // MiddleName (length: 50)

        ///<summary>
        /// Last name of the person.
        ///</summary>
        public string LastName { get; set; } // LastName (length: 50)

        ///<summary>
        /// Surname suffix. For example, Sr. or Jr.
        ///</summary>
        public string Suffix { get; set; } // Suffix (length: 10)

        ///<summary>
        /// 0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners.
        ///</summary>
        public int EmailPromotion { get; set; } // EmailPromotion

        ///<summary>
        /// Additional contact information about the person stored in xml format.
        ///</summary>
        public string AdditionalContactInfo { get; set; } // AdditionalContactInfo

        ///<summary>
        /// Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.
        ///</summary>
        public string Demographics { get; set; } // Demographics

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual HumanResources_Employee HumanResources_Employee { get; set; } // Employee.FK_Employee_Person_BusinessEntityID
        public virtual Person_Password Person_Password { get; set; } // Password.FK_Password_Person_BusinessEntityID
        public virtual System.Collections.Generic.ICollection<Person_BusinessEntityContact> Person_BusinessEntityContacts { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Person_EmailAddress> Person_EmailAddresses { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Person_PersonPhone> Person_PersonPhones { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Sales_Customer> Sales_Customers { get; set; } // Customer.FK_Customer_Person_PersonID
        public virtual System.Collections.Generic.ICollection<Sales_PersonCreditCard> Sales_PersonCreditCards { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Person_BusinessEntity Person_BusinessEntity { get; set; } // FK_Person_BusinessEntity_BusinessEntityID

        public Person_Person()
        {
            NameStyle = false;
            EmailPromotion = 0;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_BusinessEntityContacts = new System.Collections.Generic.List<Person_BusinessEntityContact>();
            Sales_Customers = new System.Collections.Generic.List<Sales_Customer>();
            Person_EmailAddresses = new System.Collections.Generic.List<Person_EmailAddress>();
            Sales_PersonCreditCards = new System.Collections.Generic.List<Sales_PersonCreditCard>();
            Person_PersonPhones = new System.Collections.Generic.List<Person_PersonPhone>();
        }
    }

    // PersonPhone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_PersonPhone
    {

        ///<summary>
        /// Business entity identification number. Foreign key to Person.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Telephone number identification number.
        ///</summary>
        public string PhoneNumber { get; set; } // PhoneNumber (Primary key) (length: 25)

        ///<summary>
        /// Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.
        ///</summary>
        public int PhoneNumberTypeId { get; set; } // PhoneNumberTypeID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person_Person Person_Person { get; set; } // FK_PersonPhone_Person_BusinessEntityID
        public virtual Person_PhoneNumberType Person_PhoneNumberType { get; set; } // FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID

        public Person_PersonPhone()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // PhoneNumberType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_PhoneNumberType
    {

        ///<summary>
        /// Primary key for telephone number type records.
        ///</summary>
        public int PhoneNumberTypeId { get; set; } // PhoneNumberTypeID (Primary key)

        ///<summary>
        /// Name of the telephone number type
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Person_PersonPhone> Person_PersonPhones { get; set; } // Many to many mapping

        public Person_PhoneNumberType()
        {
            ModifiedDate = System.DateTime.Now;
            Person_PersonPhones = new System.Collections.Generic.List<Person_PersonPhone>();
        }
    }

    // StateProvince
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_StateProvince
    {

        ///<summary>
        /// Primary key for StateProvince records.
        ///</summary>
        public int StateProvinceId { get; set; } // StateProvinceID (Primary key)

        ///<summary>
        /// ISO standard state or province code.
        ///</summary>
        public string StateProvinceCode { get; set; } // StateProvinceCode (length: 3)

        ///<summary>
        /// ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        public string CountryRegionCode { get; set; } // CountryRegionCode (length: 3)

        ///<summary>
        /// 0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.
        ///</summary>
        public bool IsOnlyStateProvinceFlag { get; set; } // IsOnlyStateProvinceFlag

        ///<summary>
        /// State or province description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        public int TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Person_Address> Person_Addresses { get; set; } // Address.FK_Address_StateProvince_StateProvinceID
        public virtual System.Collections.Generic.ICollection<Sales_SalesTaxRate> Sales_SalesTaxRates { get; set; } // SalesTaxRate.FK_SalesTaxRate_StateProvince_StateProvinceID

        // Foreign keys
        public virtual Person_CountryRegion Person_CountryRegion { get; set; } // FK_StateProvince_CountryRegion_CountryRegionCode
        public virtual Sales_SalesTerritory Sales_SalesTerritory { get; set; } // FK_StateProvince_SalesTerritory_TerritoryID

        public Person_StateProvince()
        {
            IsOnlyStateProvinceFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Person_Addresses = new System.Collections.Generic.List<Person_Address>();
            Sales_SalesTaxRates = new System.Collections.Generic.List<Sales_SalesTaxRate>();
        }
    }

    // BillOfMaterials
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_BillOfMaterial
    {

        ///<summary>
        /// Primary key for BillOfMaterials records.
        ///</summary>
        public int BillOfMaterialsId { get; set; } // BillOfMaterialsID (Primary key)

        ///<summary>
        /// Parent product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int? ProductAssemblyId { get; set; } // ProductAssemblyID

        ///<summary>
        /// Component identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ComponentId { get; set; } // ComponentID

        ///<summary>
        /// Date the component started being used in the assembly item.
        ///</summary>
        public System.DateTime StartDate { get; set; } // StartDate

        ///<summary>
        /// Date the component stopped being used in the assembly item.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Standard code identifying the unit of measure for the quantity.
        ///</summary>
        public string UnitMeasureCode { get; set; } // UnitMeasureCode (length: 3)

        ///<summary>
        /// Indicates the depth the component is from its parent (AssemblyID).
        ///</summary>
        public short BomLevel { get; set; } // BOMLevel

        ///<summary>
        /// Quantity of the component needed to create the assembly.
        ///</summary>
        public decimal PerAssemblyQty { get; set; } // PerAssemblyQty

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Production_Product Component { get; set; } // FK_BillOfMaterials_Product_ComponentID
        public virtual Production_Product ProductAssembly { get; set; } // FK_BillOfMaterials_Product_ProductAssemblyID
        public virtual Production_UnitMeasure Production_UnitMeasure { get; set; } // FK_BillOfMaterials_UnitMeasure_UnitMeasureCode

        public Production_BillOfMaterial()
        {
            StartDate = System.DateTime.Now;
            PerAssemblyQty = 1.00m;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // Culture
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_Culture
    {

        ///<summary>
        /// Primary key for Culture records.
        ///</summary>
        public string CultureId { get; set; } // CultureID (Primary key) (length: 6)

        ///<summary>
        /// Culture description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Production_ProductModelProductDescriptionCulture> Production_ProductModelProductDescriptionCultures { get; set; } // Many to many mapping

        public Production_Culture()
        {
            ModifiedDate = System.DateTime.Now;
            Production_ProductModelProductDescriptionCultures = new System.Collections.Generic.List<Production_ProductModelProductDescriptionCulture>();
        }
    }

    // Document
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_Document
    {

        ///<summary>
        /// Primary key for Document records.
        ///</summary>
        public System.Data.Entity.Hierarchy.HierarchyId DocumentNode { get; set; } // DocumentNode (Primary key)

        ///<summary>
        /// Depth in the document hierarchy.
        ///</summary>
        public short? DocumentLevel { get; private set; } // DocumentLevel

        ///<summary>
        /// Title of the document.
        ///</summary>
        public string Title { get; set; } // Title (length: 50)

        ///<summary>
        /// Employee who controls the document.  Foreign key to Employee.BusinessEntityID
        ///</summary>
        public int Owner { get; set; } // Owner

        ///<summary>
        /// 0 = This is a folder, 1 = This is a document.
        ///</summary>
        public bool FolderFlag { get; set; } // FolderFlag

        ///<summary>
        /// File name of the document
        ///</summary>
        public string FileName { get; set; } // FileName (length: 400)

        ///<summary>
        /// File extension indicating the document type. For example, .doc or .txt.
        ///</summary>
        public string FileExtension { get; set; } // FileExtension (length: 8)

        ///<summary>
        /// Revision number of the document.
        ///</summary>
        public string Revision { get; set; } // Revision (length: 5)

        ///<summary>
        /// Engineering change approval number.
        ///</summary>
        public int ChangeNumber { get; set; } // ChangeNumber

        ///<summary>
        /// 1 = Pending approval, 2 = Approved, 3 = Obsolete
        ///</summary>
        public byte Status { get; set; } // Status

        ///<summary>
        /// Document abstract.
        ///</summary>
        public string DocumentSummary { get; set; } // DocumentSummary

        ///<summary>
        /// Complete document.
        ///</summary>
        public byte[] Document { get; set; } // Document

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Required for FileStream.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Production_ProductDocument> Production_ProductDocuments { get; set; } // Many to many mapping

        // Foreign keys
        public virtual HumanResources_Employee HumanResources_Employee { get; set; } // FK_Document_Employee_Owner

        public Production_Document()
        {
            FolderFlag = false;
            ChangeNumber = 0;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Production_ProductDocuments = new System.Collections.Generic.List<Production_ProductDocument>();
        }
    }

    // Illustration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_Illustration
    {

        ///<summary>
        /// Primary key for Illustration records.
        ///</summary>
        public int IllustrationId { get; set; } // IllustrationID (Primary key)

        ///<summary>
        /// Illustrations used in manufacturing instructions. Stored as XML.
        ///</summary>
        public string Diagram { get; set; } // Diagram

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Production_ProductModelIllustration> Production_ProductModelIllustrations { get; set; } // Many to many mapping

        public Production_Illustration()
        {
            ModifiedDate = System.DateTime.Now;
            Production_ProductModelIllustrations = new System.Collections.Generic.List<Production_ProductModelIllustration>();
        }
    }

    // Location
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_Location
    {

        ///<summary>
        /// Primary key for Location records.
        ///</summary>
        public short LocationId { get; set; } // LocationID (Primary key)

        ///<summary>
        /// Location description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Standard hourly cost of the manufacturing location.
        ///</summary>
        public decimal CostRate { get; set; } // CostRate

        ///<summary>
        /// Work capacity (in hours) of the manufacturing location.
        ///</summary>
        public decimal Availability { get; set; } // Availability

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Production_ProductInventory> Production_ProductInventories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Production_WorkOrderRouting> Production_WorkOrderRoutings { get; set; } // WorkOrderRouting.FK_WorkOrderRouting_Location_LocationID

        public Production_Location()
        {
            CostRate = 0.00m;
            Availability = 0.00m;
            ModifiedDate = System.DateTime.Now;
            Production_ProductInventories = new System.Collections.Generic.List<Production_ProductInventory>();
            Production_WorkOrderRoutings = new System.Collections.Generic.List<Production_WorkOrderRouting>();
        }
    }

    // Product
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_Product
    {

        ///<summary>
        /// Primary key for Product records.
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Name of the product.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Unique product identification number.
        ///</summary>
        public string ProductNumber { get; set; } // ProductNumber (length: 25)

        ///<summary>
        /// 0 = Product is purchased, 1 = Product is manufactured in-house.
        ///</summary>
        public bool MakeFlag { get; set; } // MakeFlag

        ///<summary>
        /// 0 = Product is not a salable item. 1 = Product is salable.
        ///</summary>
        public bool FinishedGoodsFlag { get; set; } // FinishedGoodsFlag

        ///<summary>
        /// Product color.
        ///</summary>
        public string Color { get; set; } // Color (length: 15)

        ///<summary>
        /// Minimum inventory quantity.
        ///</summary>
        public short SafetyStockLevel { get; set; } // SafetyStockLevel

        ///<summary>
        /// Inventory level that triggers a purchase order or work order.
        ///</summary>
        public short ReorderPoint { get; set; } // ReorderPoint

        ///<summary>
        /// Standard cost of the product.
        ///</summary>
        public decimal StandardCost { get; set; } // StandardCost

        ///<summary>
        /// Selling price.
        ///</summary>
        public decimal ListPrice { get; set; } // ListPrice

        ///<summary>
        /// Product size.
        ///</summary>
        public string Size { get; set; } // Size (length: 5)

        ///<summary>
        /// Unit of measure for Size column.
        ///</summary>
        public string SizeUnitMeasureCode { get; set; } // SizeUnitMeasureCode (length: 3)

        ///<summary>
        /// Unit of measure for Weight column.
        ///</summary>
        public string WeightUnitMeasureCode { get; set; } // WeightUnitMeasureCode (length: 3)

        ///<summary>
        /// Product weight.
        ///</summary>
        public decimal? Weight { get; set; } // Weight

        ///<summary>
        /// Number of days required to manufacture the product.
        ///</summary>
        public int DaysToManufacture { get; set; } // DaysToManufacture

        ///<summary>
        /// R = Road, M = Mountain, T = Touring, S = Standard
        ///</summary>
        public string ProductLine { get; set; } // ProductLine (length: 2)

        ///<summary>
        /// H = High, M = Medium, L = Low
        ///</summary>
        public string Class { get; set; } // Class (length: 2)

        ///<summary>
        /// W = Womens, M = Mens, U = Universal
        ///</summary>
        public string Style { get; set; } // Style (length: 2)

        ///<summary>
        /// Product is a member of this product subcategory. Foreign key to ProductSubCategory.ProductSubCategoryID.
        ///</summary>
        public int? ProductSubcategoryId { get; set; } // ProductSubcategoryID

        ///<summary>
        /// Product is a member of this product model. Foreign key to ProductModel.ProductModelID.
        ///</summary>
        public int? ProductModelId { get; set; } // ProductModelID

        ///<summary>
        /// Date the product was available for sale.
        ///</summary>
        public System.DateTime SellStartDate { get; set; } // SellStartDate

        ///<summary>
        /// Date the product was no longer available for sale.
        ///</summary>
        public System.DateTime? SellEndDate { get; set; } // SellEndDate

        ///<summary>
        /// Date the product was discontinued.
        ///</summary>
        public System.DateTime? DiscontinuedDate { get; set; } // DiscontinuedDate

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Production_BillOfMaterial> Component { get; set; } // BillOfMaterials.FK_BillOfMaterials_Product_ComponentID
        public virtual System.Collections.Generic.ICollection<Production_BillOfMaterial> ProductAssembly { get; set; } // BillOfMaterials.FK_BillOfMaterials_Product_ProductAssemblyID
        public virtual System.Collections.Generic.ICollection<Production_ProductCostHistory> Production_ProductCostHistories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Production_ProductDocument> Production_ProductDocuments { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Production_ProductInventory> Production_ProductInventories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Production_ProductListPriceHistory> Production_ProductListPriceHistories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Production_ProductProductPhoto> Production_ProductProductPhotoes { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Production_ProductReview> Production_ProductReviews { get; set; } // ProductReview.FK_ProductReview_Product_ProductID
        public virtual System.Collections.Generic.ICollection<Production_TransactionHistory> Production_TransactionHistories { get; set; } // TransactionHistory.FK_TransactionHistory_Product_ProductID
        public virtual System.Collections.Generic.ICollection<Production_WorkOrder> Production_WorkOrders { get; set; } // WorkOrder.FK_WorkOrder_Product_ProductID
        public virtual System.Collections.Generic.ICollection<Purchasing_ProductVendor> Purchasing_ProductVendors { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Purchasing_PurchaseOrderDetail> Purchasing_PurchaseOrderDetails { get; set; } // PurchaseOrderDetail.FK_PurchaseOrderDetail_Product_ProductID
        public virtual System.Collections.Generic.ICollection<Sales_ShoppingCartItem> Sales_ShoppingCartItems { get; set; } // ShoppingCartItem.FK_ShoppingCartItem_Product_ProductID
        public virtual System.Collections.Generic.ICollection<Sales_SpecialOfferProduct> Sales_SpecialOfferProducts { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Production_ProductModel Production_ProductModel { get; set; } // FK_Product_ProductModel_ProductModelID
        public virtual Production_ProductSubcategory Production_ProductSubcategory { get; set; } // FK_Product_ProductSubcategory_ProductSubcategoryID
        public virtual Production_UnitMeasure Production_UnitMeasure_SizeUnitMeasureCode { get; set; } // FK_Product_UnitMeasure_SizeUnitMeasureCode
        public virtual Production_UnitMeasure Production_UnitMeasure_WeightUnitMeasureCode { get; set; } // FK_Product_UnitMeasure_WeightUnitMeasureCode

        public Production_Product()
        {
            MakeFlag = true;
            FinishedGoodsFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Component = new System.Collections.Generic.List<Production_BillOfMaterial>();
            ProductAssembly = new System.Collections.Generic.List<Production_BillOfMaterial>();
            Production_ProductCostHistories = new System.Collections.Generic.List<Production_ProductCostHistory>();
            Production_ProductDocuments = new System.Collections.Generic.List<Production_ProductDocument>();
            Production_ProductInventories = new System.Collections.Generic.List<Production_ProductInventory>();
            Production_ProductListPriceHistories = new System.Collections.Generic.List<Production_ProductListPriceHistory>();
            Production_ProductProductPhotoes = new System.Collections.Generic.List<Production_ProductProductPhoto>();
            Production_ProductReviews = new System.Collections.Generic.List<Production_ProductReview>();
            Purchasing_ProductVendors = new System.Collections.Generic.List<Purchasing_ProductVendor>();
            Purchasing_PurchaseOrderDetails = new System.Collections.Generic.List<Purchasing_PurchaseOrderDetail>();
            Sales_ShoppingCartItems = new System.Collections.Generic.List<Sales_ShoppingCartItem>();
            Sales_SpecialOfferProducts = new System.Collections.Generic.List<Sales_SpecialOfferProduct>();
            Production_TransactionHistories = new System.Collections.Generic.List<Production_TransactionHistory>();
            Production_WorkOrders = new System.Collections.Generic.List<Production_WorkOrder>();
        }
    }

    // ProductCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductCategory
    {

        ///<summary>
        /// Primary key for ProductCategory records.
        ///</summary>
        public int ProductCategoryId { get; set; } // ProductCategoryID (Primary key)

        ///<summary>
        /// Category description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Production_ProductSubcategory> Production_ProductSubcategories { get; set; } // ProductSubcategory.FK_ProductSubcategory_ProductCategory_ProductCategoryID

        public Production_ProductCategory()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Production_ProductSubcategories = new System.Collections.Generic.List<Production_ProductSubcategory>();
        }
    }

    // ProductCostHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductCostHistory
    {

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Product cost start date.
        ///</summary>
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)

        ///<summary>
        /// Product cost end date.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Standard cost of the product.
        ///</summary>
        public decimal StandardCost { get; set; } // StandardCost

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Production_Product Production_Product { get; set; } // FK_ProductCostHistory_Product_ProductID

        public Production_ProductCostHistory()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductDescription
    {

        ///<summary>
        /// Primary key for ProductDescription records.
        ///</summary>
        public int ProductDescriptionId { get; set; } // ProductDescriptionID (Primary key)

        ///<summary>
        /// Description of the product.
        ///</summary>
        public string Description { get; set; } // Description (length: 400)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Production_ProductModelProductDescriptionCulture> Production_ProductModelProductDescriptionCultures { get; set; } // Many to many mapping

        public Production_ProductDescription()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Production_ProductModelProductDescriptionCultures = new System.Collections.Generic.List<Production_ProductModelProductDescriptionCulture>();
        }
    }

    // ProductDocument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductDocument
    {

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Document identification number. Foreign key to Document.DocumentNode.
        ///</summary>
        public System.Data.Entity.Hierarchy.HierarchyId DocumentNode { get; set; } // DocumentNode (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Production_Document Production_Document { get; set; } // FK_ProductDocument_Document_DocumentNode
        public virtual Production_Product Production_Product { get; set; } // FK_ProductDocument_Product_ProductID

        public Production_ProductDocument()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductInventory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductInventory
    {

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Inventory location identification number. Foreign key to Location.LocationID.
        ///</summary>
        public short LocationId { get; set; } // LocationID (Primary key)

        ///<summary>
        /// Storage compartment within an inventory location.
        ///</summary>
        public string Shelf { get; set; } // Shelf (length: 10)

        ///<summary>
        /// Storage container on a shelf in an inventory location.
        ///</summary>
        public byte Bin { get; set; } // Bin

        ///<summary>
        /// Quantity of products in the inventory location.
        ///</summary>
        public short Quantity { get; set; } // Quantity

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Production_Location Production_Location { get; set; } // FK_ProductInventory_Location_LocationID
        public virtual Production_Product Production_Product { get; set; } // FK_ProductInventory_Product_ProductID

        public Production_ProductInventory()
        {
            Quantity = 0;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductListPriceHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductListPriceHistory
    {

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// List price start date.
        ///</summary>
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)

        ///<summary>
        /// List price end date
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Product list price.
        ///</summary>
        public decimal ListPrice { get; set; } // ListPrice

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Production_Product Production_Product { get; set; } // FK_ProductListPriceHistory_Product_ProductID

        public Production_ProductListPriceHistory()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductModel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductModel
    {

        ///<summary>
        /// Primary key for ProductModel records.
        ///</summary>
        public int ProductModelId { get; set; } // ProductModelID (Primary key)

        ///<summary>
        /// Product model description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Detailed product catalog information in xml format.
        ///</summary>
        public string CatalogDescription { get; set; } // CatalogDescription

        ///<summary>
        /// Manufacturing instructions in xml format.
        ///</summary>
        public string Instructions { get; set; } // Instructions

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Production_Product> Production_Products { get; set; } // Product.FK_Product_ProductModel_ProductModelID
        public virtual System.Collections.Generic.ICollection<Production_ProductModelIllustration> Production_ProductModelIllustrations { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Production_ProductModelProductDescriptionCulture> Production_ProductModelProductDescriptionCultures { get; set; } // Many to many mapping

        public Production_ProductModel()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Production_Products = new System.Collections.Generic.List<Production_Product>();
            Production_ProductModelIllustrations = new System.Collections.Generic.List<Production_ProductModelIllustration>();
            Production_ProductModelProductDescriptionCultures = new System.Collections.Generic.List<Production_ProductModelProductDescriptionCulture>();
        }
    }

    // ProductModelIllustration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductModelIllustration
    {

        ///<summary>
        /// Primary key. Foreign key to ProductModel.ProductModelID.
        ///</summary>
        public int ProductModelId { get; set; } // ProductModelID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Illustration.IllustrationID.
        ///</summary>
        public int IllustrationId { get; set; } // IllustrationID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Production_Illustration Production_Illustration { get; set; } // FK_ProductModelIllustration_Illustration_IllustrationID
        public virtual Production_ProductModel Production_ProductModel { get; set; } // FK_ProductModelIllustration_ProductModel_ProductModelID

        public Production_ProductModelIllustration()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductModelProductDescriptionCulture
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductModelProductDescriptionCulture
    {

        ///<summary>
        /// Primary key. Foreign key to ProductModel.ProductModelID.
        ///</summary>
        public int ProductModelId { get; set; } // ProductModelID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to ProductDescription.ProductDescriptionID.
        ///</summary>
        public int ProductDescriptionId { get; set; } // ProductDescriptionID (Primary key)

        ///<summary>
        /// Culture identification number. Foreign key to Culture.CultureID.
        ///</summary>
        public string CultureId { get; set; } // CultureID (Primary key) (length: 6)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Production_Culture Production_Culture { get; set; } // FK_ProductModelProductDescriptionCulture_Culture_CultureID
        public virtual Production_ProductDescription Production_ProductDescription { get; set; } // FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID
        public virtual Production_ProductModel Production_ProductModel { get; set; } // FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID

        public Production_ProductModelProductDescriptionCulture()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductPhoto
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductPhoto
    {

        ///<summary>
        /// Primary key for ProductPhoto records.
        ///</summary>
        public int ProductPhotoId { get; set; } // ProductPhotoID (Primary key)

        ///<summary>
        /// Small image of the product.
        ///</summary>
        public byte[] ThumbNailPhoto { get; set; } // ThumbNailPhoto

        ///<summary>
        /// Small image file name.
        ///</summary>
        public string ThumbnailPhotoFileName { get; set; } // ThumbnailPhotoFileName (length: 50)

        ///<summary>
        /// Large image of the product.
        ///</summary>
        public byte[] LargePhoto { get; set; } // LargePhoto

        ///<summary>
        /// Large image file name.
        ///</summary>
        public string LargePhotoFileName { get; set; } // LargePhotoFileName (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Production_ProductProductPhoto> Production_ProductProductPhotoes { get; set; } // Many to many mapping

        public Production_ProductPhoto()
        {
            ModifiedDate = System.DateTime.Now;
            Production_ProductProductPhotoes = new System.Collections.Generic.List<Production_ProductProductPhoto>();
        }
    }

    // ProductProductPhoto
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductProductPhoto
    {

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Product photo identification number. Foreign key to ProductPhoto.ProductPhotoID.
        ///</summary>
        public int ProductPhotoId { get; set; } // ProductPhotoID (Primary key)

        ///<summary>
        /// 0 = Photo is not the principal image. 1 = Photo is the principal image.
        ///</summary>
        public bool Primary { get; set; } // Primary

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Production_Product Production_Product { get; set; } // FK_ProductProductPhoto_Product_ProductID
        public virtual Production_ProductPhoto Production_ProductPhoto { get; set; } // FK_ProductProductPhoto_ProductPhoto_ProductPhotoID

        public Production_ProductProductPhoto()
        {
            Primary = false;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductReview
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductReview
    {

        ///<summary>
        /// Primary key for ProductReview records.
        ///</summary>
        public int ProductReviewId { get; set; } // ProductReviewID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Name of the reviewer.
        ///</summary>
        public string ReviewerName { get; set; } // ReviewerName (length: 50)

        ///<summary>
        /// Date review was submitted.
        ///</summary>
        public System.DateTime ReviewDate { get; set; } // ReviewDate

        ///<summary>
        /// Reviewer's e-mail address.
        ///</summary>
        public string EmailAddress { get; set; } // EmailAddress (length: 50)

        ///<summary>
        /// Product rating given by the reviewer. Scale is 1 to 5 with 5 as the highest rating.
        ///</summary>
        public int Rating { get; set; } // Rating

        ///<summary>
        /// Reviewer's comments
        ///</summary>
        public string Comments { get; set; } // Comments (length: 3850)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Production_Product Production_Product { get; set; } // FK_ProductReview_Product_ProductID

        public Production_ProductReview()
        {
            ReviewDate = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductSubcategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductSubcategory
    {

        ///<summary>
        /// Primary key for ProductSubcategory records.
        ///</summary>
        public int ProductSubcategoryId { get; set; } // ProductSubcategoryID (Primary key)

        ///<summary>
        /// Product category identification number. Foreign key to ProductCategory.ProductCategoryID.
        ///</summary>
        public int ProductCategoryId { get; set; } // ProductCategoryID

        ///<summary>
        /// Subcategory description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Production_Product> Production_Products { get; set; } // Product.FK_Product_ProductSubcategory_ProductSubcategoryID

        // Foreign keys
        public virtual Production_ProductCategory Production_ProductCategory { get; set; } // FK_ProductSubcategory_ProductCategory_ProductCategoryID

        public Production_ProductSubcategory()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Production_Products = new System.Collections.Generic.List<Production_Product>();
        }
    }

    // ScrapReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ScrapReason
    {

        ///<summary>
        /// Primary key for ScrapReason records.
        ///</summary>
        public short ScrapReasonId { get; set; } // ScrapReasonID (Primary key)

        ///<summary>
        /// Failure description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Production_WorkOrder> Production_WorkOrders { get; set; } // WorkOrder.FK_WorkOrder_ScrapReason_ScrapReasonID

        public Production_ScrapReason()
        {
            ModifiedDate = System.DateTime.Now;
            Production_WorkOrders = new System.Collections.Generic.List<Production_WorkOrder>();
        }
    }

    // TransactionHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_TransactionHistory
    {

        ///<summary>
        /// Primary key for TransactionHistory records.
        ///</summary>
        public int TransactionId { get; set; } // TransactionID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Purchase order, sales order, or work order identification number.
        ///</summary>
        public int ReferenceOrderId { get; set; } // ReferenceOrderID

        ///<summary>
        /// Line number associated with the purchase order, sales order, or work order.
        ///</summary>
        public int ReferenceOrderLineId { get; set; } // ReferenceOrderLineID

        ///<summary>
        /// Date and time of the transaction.
        ///</summary>
        public System.DateTime TransactionDate { get; set; } // TransactionDate

        ///<summary>
        /// W = WorkOrder, S = SalesOrder, P = PurchaseOrder
        ///</summary>
        public string TransactionType { get; set; } // TransactionType (length: 1)

        ///<summary>
        /// Product quantity.
        ///</summary>
        public int Quantity { get; set; } // Quantity

        ///<summary>
        /// Product cost.
        ///</summary>
        public decimal ActualCost { get; set; } // ActualCost

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Production_Product Production_Product { get; set; } // FK_TransactionHistory_Product_ProductID

        public Production_TransactionHistory()
        {
            ReferenceOrderLineId = 0;
            TransactionDate = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // TransactionHistoryArchive
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_TransactionHistoryArchive
    {

        ///<summary>
        /// Primary key for TransactionHistoryArchive records.
        ///</summary>
        public int TransactionId { get; set; } // TransactionID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Purchase order, sales order, or work order identification number.
        ///</summary>
        public int ReferenceOrderId { get; set; } // ReferenceOrderID

        ///<summary>
        /// Line number associated with the purchase order, sales order, or work order.
        ///</summary>
        public int ReferenceOrderLineId { get; set; } // ReferenceOrderLineID

        ///<summary>
        /// Date and time of the transaction.
        ///</summary>
        public System.DateTime TransactionDate { get; set; } // TransactionDate

        ///<summary>
        /// W = Work Order, S = Sales Order, P = Purchase Order
        ///</summary>
        public string TransactionType { get; set; } // TransactionType (length: 1)

        ///<summary>
        /// Product quantity.
        ///</summary>
        public int Quantity { get; set; } // Quantity

        ///<summary>
        /// Product cost.
        ///</summary>
        public decimal ActualCost { get; set; } // ActualCost

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        public Production_TransactionHistoryArchive()
        {
            ReferenceOrderLineId = 0;
            TransactionDate = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // UnitMeasure
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_UnitMeasure
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        public string UnitMeasureCode { get; set; } // UnitMeasureCode (Primary key) (length: 3)

        ///<summary>
        /// Unit of measure description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Production_BillOfMaterial> Production_BillOfMaterials { get; set; } // BillOfMaterials.FK_BillOfMaterials_UnitMeasure_UnitMeasureCode
        public virtual System.Collections.Generic.ICollection<Production_Product> SizeUnitMeasureCode { get; set; } // Product.FK_Product_UnitMeasure_SizeUnitMeasureCode
        public virtual System.Collections.Generic.ICollection<Production_Product> WeightUnitMeasureCode { get; set; } // Product.FK_Product_UnitMeasure_WeightUnitMeasureCode
        public virtual System.Collections.Generic.ICollection<Purchasing_ProductVendor> Purchasing_ProductVendors { get; set; } // ProductVendor.FK_ProductVendor_UnitMeasure_UnitMeasureCode

        public Production_UnitMeasure()
        {
            ModifiedDate = System.DateTime.Now;
            Production_BillOfMaterials = new System.Collections.Generic.List<Production_BillOfMaterial>();
            SizeUnitMeasureCode = new System.Collections.Generic.List<Production_Product>();
            WeightUnitMeasureCode = new System.Collections.Generic.List<Production_Product>();
            Purchasing_ProductVendors = new System.Collections.Generic.List<Purchasing_ProductVendor>();
        }
    }

    // WorkOrder
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_WorkOrder
    {

        ///<summary>
        /// Primary key for WorkOrder records.
        ///</summary>
        public int WorkOrderId { get; set; } // WorkOrderID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Product quantity to build.
        ///</summary>
        public int OrderQty { get; set; } // OrderQty

        ///<summary>
        /// Quantity built and put in inventory.
        ///</summary>
        public int StockedQty { get; private set; } // StockedQty

        ///<summary>
        /// Quantity that failed inspection.
        ///</summary>
        public short ScrappedQty { get; set; } // ScrappedQty

        ///<summary>
        /// Work order start date.
        ///</summary>
        public System.DateTime StartDate { get; set; } // StartDate

        ///<summary>
        /// Work order end date.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// Work order due date.
        ///</summary>
        public System.DateTime DueDate { get; set; } // DueDate

        ///<summary>
        /// Reason for inspection failure.
        ///</summary>
        public short? ScrapReasonId { get; set; } // ScrapReasonID

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Production_WorkOrderRouting> Production_WorkOrderRoutings { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Production_Product Production_Product { get; set; } // FK_WorkOrder_Product_ProductID
        public virtual Production_ScrapReason Production_ScrapReason { get; set; } // FK_WorkOrder_ScrapReason_ScrapReasonID

        public Production_WorkOrder()
        {
            ModifiedDate = System.DateTime.Now;
            Production_WorkOrderRoutings = new System.Collections.Generic.List<Production_WorkOrderRouting>();
        }
    }

    // WorkOrderRouting
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_WorkOrderRouting
    {

        ///<summary>
        /// Primary key. Foreign key to WorkOrder.WorkOrderID.
        ///</summary>
        public int WorkOrderId { get; set; } // WorkOrderID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Primary key. Indicates the manufacturing process sequence.
        ///</summary>
        public short OperationSequence { get; set; } // OperationSequence (Primary key)

        ///<summary>
        /// Manufacturing location where the part is processed. Foreign key to Location.LocationID.
        ///</summary>
        public short LocationId { get; set; } // LocationID

        ///<summary>
        /// Planned manufacturing start date.
        ///</summary>
        public System.DateTime ScheduledStartDate { get; set; } // ScheduledStartDate

        ///<summary>
        /// Planned manufacturing end date.
        ///</summary>
        public System.DateTime ScheduledEndDate { get; set; } // ScheduledEndDate

        ///<summary>
        /// Actual start date.
        ///</summary>
        public System.DateTime? ActualStartDate { get; set; } // ActualStartDate

        ///<summary>
        /// Actual end date.
        ///</summary>
        public System.DateTime? ActualEndDate { get; set; } // ActualEndDate

        ///<summary>
        /// Number of manufacturing hours used.
        ///</summary>
        public decimal? ActualResourceHrs { get; set; } // ActualResourceHrs

        ///<summary>
        /// Estimated manufacturing cost.
        ///</summary>
        public decimal PlannedCost { get; set; } // PlannedCost

        ///<summary>
        /// Actual manufacturing cost.
        ///</summary>
        public decimal? ActualCost { get; set; } // ActualCost

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Production_Location Production_Location { get; set; } // FK_WorkOrderRouting_Location_LocationID
        public virtual Production_WorkOrder Production_WorkOrder { get; set; } // FK_WorkOrderRouting_WorkOrder_WorkOrderID

        public Production_WorkOrderRouting()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ProductVendor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Purchasing_ProductVendor
    {

        ///<summary>
        /// Primary key. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Vendor.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// The average span of time (in days) between placing an order with the vendor and receiving the purchased product.
        ///</summary>
        public int AverageLeadTime { get; set; } // AverageLeadTime

        ///<summary>
        /// The vendor's usual selling price.
        ///</summary>
        public decimal StandardPrice { get; set; } // StandardPrice

        ///<summary>
        /// The selling price when last purchased.
        ///</summary>
        public decimal? LastReceiptCost { get; set; } // LastReceiptCost

        ///<summary>
        /// Date the product was last received by the vendor.
        ///</summary>
        public System.DateTime? LastReceiptDate { get; set; } // LastReceiptDate

        ///<summary>
        /// The maximum quantity that should be ordered.
        ///</summary>
        public int MinOrderQty { get; set; } // MinOrderQty

        ///<summary>
        /// The minimum quantity that should be ordered.
        ///</summary>
        public int MaxOrderQty { get; set; } // MaxOrderQty

        ///<summary>
        /// The quantity currently on order.
        ///</summary>
        public int? OnOrderQty { get; set; } // OnOrderQty

        ///<summary>
        /// The product's unit of measure.
        ///</summary>
        public string UnitMeasureCode { get; set; } // UnitMeasureCode (length: 3)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Production_Product Production_Product { get; set; } // FK_ProductVendor_Product_ProductID
        public virtual Production_UnitMeasure Production_UnitMeasure { get; set; } // FK_ProductVendor_UnitMeasure_UnitMeasureCode
        public virtual Purchasing_Vendor Purchasing_Vendor { get; set; } // FK_ProductVendor_Vendor_BusinessEntityID

        public Purchasing_ProductVendor()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // PurchaseOrderDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Purchasing_PurchaseOrderDetail
    {

        ///<summary>
        /// Primary key. Foreign key to PurchaseOrderHeader.PurchaseOrderID.
        ///</summary>
        public int PurchaseOrderId { get; set; } // PurchaseOrderID (Primary key)

        ///<summary>
        /// Primary key. One line number per purchased product.
        ///</summary>
        public int PurchaseOrderDetailId { get; set; } // PurchaseOrderDetailID (Primary key)

        ///<summary>
        /// Date the product is expected to be received.
        ///</summary>
        public System.DateTime DueDate { get; set; } // DueDate

        ///<summary>
        /// Quantity ordered.
        ///</summary>
        public short OrderQty { get; set; } // OrderQty

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Vendor's selling price of a single product.
        ///</summary>
        public decimal UnitPrice { get; set; } // UnitPrice

        ///<summary>
        /// Per product subtotal. Computed as OrderQty * UnitPrice.
        ///</summary>
        public decimal LineTotal { get; private set; } // LineTotal

        ///<summary>
        /// Quantity actually received from the vendor.
        ///</summary>
        public decimal ReceivedQty { get; set; } // ReceivedQty

        ///<summary>
        /// Quantity rejected during inspection.
        ///</summary>
        public decimal RejectedQty { get; set; } // RejectedQty

        ///<summary>
        /// Quantity accepted into inventory. Computed as ReceivedQty - RejectedQty.
        ///</summary>
        public decimal StockedQty { get; private set; } // StockedQty

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Production_Product Production_Product { get; set; } // FK_PurchaseOrderDetail_Product_ProductID
        public virtual Purchasing_PurchaseOrderHeader Purchasing_PurchaseOrderHeader { get; set; } // FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID

        public Purchasing_PurchaseOrderDetail()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // PurchaseOrderHeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Purchasing_PurchaseOrderHeader
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        public int PurchaseOrderId { get; set; } // PurchaseOrderID (Primary key)

        ///<summary>
        /// Incremental number to track changes to the purchase order over time.
        ///</summary>
        public byte RevisionNumber { get; set; } // RevisionNumber

        ///<summary>
        /// Order current status. 1 = Pending; 2 = Approved; 3 = Rejected; 4 = Complete
        ///</summary>
        public byte Status { get; set; } // Status

        ///<summary>
        /// Employee who created the purchase order. Foreign key to Employee.BusinessEntityID.
        ///</summary>
        public int EmployeeId { get; set; } // EmployeeID

        ///<summary>
        /// Vendor with whom the purchase order is placed. Foreign key to Vendor.BusinessEntityID.
        ///</summary>
        public int VendorId { get; set; } // VendorID

        ///<summary>
        /// Shipping method. Foreign key to ShipMethod.ShipMethodID.
        ///</summary>
        public int ShipMethodId { get; set; } // ShipMethodID

        ///<summary>
        /// Purchase order creation date.
        ///</summary>
        public System.DateTime OrderDate { get; set; } // OrderDate

        ///<summary>
        /// Estimated shipment date from the vendor.
        ///</summary>
        public System.DateTime? ShipDate { get; set; } // ShipDate

        ///<summary>
        /// Purchase order subtotal. Computed as SUM(PurchaseOrderDetail.LineTotal)for the appropriate PurchaseOrderID.
        ///</summary>
        public decimal SubTotal { get; set; } // SubTotal

        ///<summary>
        /// Tax amount.
        ///</summary>
        public decimal TaxAmt { get; set; } // TaxAmt

        ///<summary>
        /// Shipping cost.
        ///</summary>
        public decimal Freight { get; set; } // Freight

        ///<summary>
        /// Total due to vendor. Computed as Subtotal + TaxAmt + Freight.
        ///</summary>
        public decimal TotalDue { get; private set; } // TotalDue

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Purchasing_PurchaseOrderDetail> Purchasing_PurchaseOrderDetails { get; set; } // Many to many mapping

        // Foreign keys
        public virtual HumanResources_Employee HumanResources_Employee { get; set; } // FK_PurchaseOrderHeader_Employee_EmployeeID
        public virtual Purchasing_ShipMethod Purchasing_ShipMethod { get; set; } // FK_PurchaseOrderHeader_ShipMethod_ShipMethodID
        public virtual Purchasing_Vendor Purchasing_Vendor { get; set; } // FK_PurchaseOrderHeader_Vendor_VendorID

        public Purchasing_PurchaseOrderHeader()
        {
            RevisionNumber = 0;
            Status = 1;
            OrderDate = System.DateTime.Now;
            SubTotal = 0.00m;
            TaxAmt = 0.00m;
            Freight = 0.00m;
            ModifiedDate = System.DateTime.Now;
            Purchasing_PurchaseOrderDetails = new System.Collections.Generic.List<Purchasing_PurchaseOrderDetail>();
        }
    }

    // ShipMethod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Purchasing_ShipMethod
    {

        ///<summary>
        /// Primary key for ShipMethod records.
        ///</summary>
        public int ShipMethodId { get; set; } // ShipMethodID (Primary key)

        ///<summary>
        /// Shipping company name.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Minimum shipping charge.
        ///</summary>
        public decimal ShipBase { get; set; } // ShipBase

        ///<summary>
        /// Shipping charge per pound.
        ///</summary>
        public decimal ShipRate { get; set; } // ShipRate

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Purchasing_PurchaseOrderHeader> Purchasing_PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader.FK_PurchaseOrderHeader_ShipMethod_ShipMethodID
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_ShipMethod_ShipMethodID

        public Purchasing_ShipMethod()
        {
            ShipBase = 0.00m;
            ShipRate = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Purchasing_PurchaseOrderHeaders = new System.Collections.Generic.List<Purchasing_PurchaseOrderHeader>();
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
        }
    }

    // Vendor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Purchasing_Vendor
    {

        ///<summary>
        /// Primary key for Vendor records.  Foreign key to BusinessEntity.BusinessEntityID
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Vendor account (identification) number.
        ///</summary>
        public string AccountNumber { get; set; } // AccountNumber (length: 15)

        ///<summary>
        /// Company name.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// 1 = Superior, 2 = Excellent, 3 = Above average, 4 = Average, 5 = Below average
        ///</summary>
        public byte CreditRating { get; set; } // CreditRating

        ///<summary>
        /// 0 = Do not use if another vendor is available. 1 = Preferred over other vendors supplying the same product.
        ///</summary>
        public bool PreferredVendorStatus { get; set; } // PreferredVendorStatus

        ///<summary>
        /// 0 = Vendor no longer used. 1 = Vendor is actively used.
        ///</summary>
        public bool ActiveFlag { get; set; } // ActiveFlag

        ///<summary>
        /// Vendor URL.
        ///</summary>
        public string PurchasingWebServiceUrl { get; set; } // PurchasingWebServiceURL (length: 1024)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Purchasing_ProductVendor> Purchasing_ProductVendors { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Purchasing_PurchaseOrderHeader> Purchasing_PurchaseOrderHeaders { get; set; } // PurchaseOrderHeader.FK_PurchaseOrderHeader_Vendor_VendorID

        // Foreign keys
        public virtual Person_BusinessEntity Person_BusinessEntity { get; set; } // FK_Vendor_BusinessEntity_BusinessEntityID

        public Purchasing_Vendor()
        {
            PreferredVendorStatus = true;
            ActiveFlag = true;
            ModifiedDate = System.DateTime.Now;
            Purchasing_ProductVendors = new System.Collections.Generic.List<Purchasing_ProductVendor>();
            Purchasing_PurchaseOrderHeaders = new System.Collections.Generic.List<Purchasing_PurchaseOrderHeader>();
        }
    }

    // CountryRegionCurrency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_CountryRegionCurrency
    {

        ///<summary>
        /// ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        public string CountryRegionCode { get; set; } // CountryRegionCode (Primary key) (length: 3)

        ///<summary>
        /// ISO standard currency code. Foreign key to Currency.CurrencyCode.
        ///</summary>
        public string CurrencyCode { get; set; } // CurrencyCode (Primary key) (length: 3)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person_CountryRegion Person_CountryRegion { get; set; } // FK_CountryRegionCurrency_CountryRegion_CountryRegionCode
        public virtual Sales_Currency Sales_Currency { get; set; } // FK_CountryRegionCurrency_Currency_CurrencyCode

        public Sales_CountryRegionCurrency()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // CreditCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_CreditCard
    {

        ///<summary>
        /// Primary key for CreditCard records.
        ///</summary>
        public int CreditCardId { get; set; } // CreditCardID (Primary key)

        ///<summary>
        /// Credit card name.
        ///</summary>
        public string CardType { get; set; } // CardType (length: 50)

        ///<summary>
        /// Credit card number.
        ///</summary>
        public string CardNumber { get; set; } // CardNumber (length: 25)

        ///<summary>
        /// Credit card expiration month.
        ///</summary>
        public byte ExpMonth { get; set; } // ExpMonth

        ///<summary>
        /// Credit card expiration year.
        ///</summary>
        public short ExpYear { get; set; } // ExpYear

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Sales_PersonCreditCard> Sales_PersonCreditCards { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_CreditCard_CreditCardID

        public Sales_CreditCard()
        {
            ModifiedDate = System.DateTime.Now;
            Sales_PersonCreditCards = new System.Collections.Generic.List<Sales_PersonCreditCard>();
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
        }
    }

    // Currency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_Currency
    {

        ///<summary>
        /// The ISO code for the Currency.
        ///</summary>
        public string CurrencyCode { get; set; } // CurrencyCode (Primary key) (length: 3)

        ///<summary>
        /// Currency name.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Sales_CountryRegionCurrency> Sales_CountryRegionCurrencies { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Sales_CurrencyRate> FromCurrencyCode { get; set; } // CurrencyRate.FK_CurrencyRate_Currency_FromCurrencyCode
        public virtual System.Collections.Generic.ICollection<Sales_CurrencyRate> ToCurrencyCode { get; set; } // CurrencyRate.FK_CurrencyRate_Currency_ToCurrencyCode

        public Sales_Currency()
        {
            ModifiedDate = System.DateTime.Now;
            Sales_CountryRegionCurrencies = new System.Collections.Generic.List<Sales_CountryRegionCurrency>();
            FromCurrencyCode = new System.Collections.Generic.List<Sales_CurrencyRate>();
            ToCurrencyCode = new System.Collections.Generic.List<Sales_CurrencyRate>();
        }
    }

    // CurrencyRate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_CurrencyRate
    {

        ///<summary>
        /// Primary key for CurrencyRate records.
        ///</summary>
        public int CurrencyRateId { get; set; } // CurrencyRateID (Primary key)

        ///<summary>
        /// Date and time the exchange rate was obtained.
        ///</summary>
        public System.DateTime CurrencyRateDate { get; set; } // CurrencyRateDate

        ///<summary>
        /// Exchange rate was converted from this currency code.
        ///</summary>
        public string FromCurrencyCode { get; set; } // FromCurrencyCode (length: 3)

        ///<summary>
        /// Exchange rate was converted to this currency code.
        ///</summary>
        public string ToCurrencyCode { get; set; } // ToCurrencyCode (length: 3)

        ///<summary>
        /// Average exchange rate for the day.
        ///</summary>
        public decimal AverageRate { get; set; } // AverageRate

        ///<summary>
        /// Final exchange rate for the day.
        ///</summary>
        public decimal EndOfDayRate { get; set; } // EndOfDayRate

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_CurrencyRate_CurrencyRateID

        // Foreign keys
        public virtual Sales_Currency Sales_Currency_FromCurrencyCode { get; set; } // FK_CurrencyRate_Currency_FromCurrencyCode
        public virtual Sales_Currency Sales_Currency_ToCurrencyCode { get; set; } // FK_CurrencyRate_Currency_ToCurrencyCode

        public Sales_CurrencyRate()
        {
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
        }
    }

    // Customer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_Customer
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        public int CustomerId { get; set; } // CustomerID (Primary key)

        ///<summary>
        /// Foreign key to Person.BusinessEntityID
        ///</summary>
        public int? PersonId { get; set; } // PersonID

        ///<summary>
        /// Foreign key to Store.BusinessEntityID
        ///</summary>
        public int? StoreId { get; set; } // StoreID

        ///<summary>
        /// ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        public int? TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// Unique number identifying the customer assigned by the accounting system.
        ///</summary>
        public string AccountNumber { get; private set; } // AccountNumber (length: 10)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Customer_CustomerID

        // Foreign keys
        public virtual Person_Person Person_Person { get; set; } // FK_Customer_Person_PersonID
        public virtual Sales_SalesTerritory Sales_SalesTerritory { get; set; } // FK_Customer_SalesTerritory_TerritoryID
        public virtual Sales_Store Sales_Store { get; set; } // FK_Customer_Store_StoreID

        public Sales_Customer()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
        }
    }

    // PersonCreditCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_PersonCreditCard
    {

        ///<summary>
        /// Business entity identification number. Foreign key to Person.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Credit card identification number. Foreign key to CreditCard.CreditCardID.
        ///</summary>
        public int CreditCardId { get; set; } // CreditCardID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person_Person Person_Person { get; set; } // FK_PersonCreditCard_Person_BusinessEntityID
        public virtual Sales_CreditCard Sales_CreditCard { get; set; } // FK_PersonCreditCard_CreditCard_CreditCardID

        public Sales_PersonCreditCard()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesOrderDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesOrderDetail
    {

        ///<summary>
        /// Primary key. Foreign key to SalesOrderHeader.SalesOrderID.
        ///</summary>
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key)

        ///<summary>
        /// Primary key. One incremental unique number per product sold.
        ///</summary>
        public int SalesOrderDetailId { get; set; } // SalesOrderDetailID (Primary key)

        ///<summary>
        /// Shipment tracking number supplied by the shipper.
        ///</summary>
        public string CarrierTrackingNumber { get; set; } // CarrierTrackingNumber (length: 25)

        ///<summary>
        /// Quantity ordered per product.
        ///</summary>
        public short OrderQty { get; set; } // OrderQty

        ///<summary>
        /// Product sold to customer. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Promotional code. Foreign key to SpecialOffer.SpecialOfferID.
        ///</summary>
        public int SpecialOfferId { get; set; } // SpecialOfferID

        ///<summary>
        /// Selling price of a single product.
        ///</summary>
        public decimal UnitPrice { get; set; } // UnitPrice

        ///<summary>
        /// Discount amount.
        ///</summary>
        public decimal UnitPriceDiscount { get; set; } // UnitPriceDiscount

        ///<summary>
        /// Per product subtotal. Computed as UnitPrice * (1 - UnitPriceDiscount) * OrderQty.
        ///</summary>
        public decimal LineTotal { get; private set; } // LineTotal

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Sales_SalesOrderHeader Sales_SalesOrderHeader { get; set; } // FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID
        public virtual Sales_SpecialOfferProduct Sales_SpecialOfferProduct { get; set; } // FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID

        public Sales_SalesOrderDetail()
        {
            UnitPriceDiscount = 0.0m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesOrderHeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesOrderHeader
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key)

        ///<summary>
        /// Incremental number to track changes to the sales order over time.
        ///</summary>
        public byte RevisionNumber { get; set; } // RevisionNumber

        ///<summary>
        /// Dates the sales order was created.
        ///</summary>
        public System.DateTime OrderDate { get; set; } // OrderDate

        ///<summary>
        /// Date the order is due to the customer.
        ///</summary>
        public System.DateTime DueDate { get; set; } // DueDate

        ///<summary>
        /// Date the order was shipped to the customer.
        ///</summary>
        public System.DateTime? ShipDate { get; set; } // ShipDate

        ///<summary>
        /// Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
        ///</summary>
        public byte Status { get; set; } // Status

        ///<summary>
        /// 0 = Order placed by sales person. 1 = Order placed online by customer.
        ///</summary>
        public bool OnlineOrderFlag { get; set; } // OnlineOrderFlag

        ///<summary>
        /// Unique sales order identification number.
        ///</summary>
        public string SalesOrderNumber { get; private set; } // SalesOrderNumber (length: 25)

        ///<summary>
        /// Customer purchase order number reference.
        ///</summary>
        public string PurchaseOrderNumber { get; set; } // PurchaseOrderNumber (length: 25)

        ///<summary>
        /// Financial accounting number reference.
        ///</summary>
        public string AccountNumber { get; set; } // AccountNumber (length: 15)

        ///<summary>
        /// Customer identification number. Foreign key to Customer.BusinessEntityID.
        ///</summary>
        public int CustomerId { get; set; } // CustomerID

        ///<summary>
        /// Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        public int? SalesPersonId { get; set; } // SalesPersonID

        ///<summary>
        /// Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        public int? TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// Customer billing address. Foreign key to Address.AddressID.
        ///</summary>
        public int BillToAddressId { get; set; } // BillToAddressID

        ///<summary>
        /// Customer shipping address. Foreign key to Address.AddressID.
        ///</summary>
        public int ShipToAddressId { get; set; } // ShipToAddressID

        ///<summary>
        /// Shipping method. Foreign key to ShipMethod.ShipMethodID.
        ///</summary>
        public int ShipMethodId { get; set; } // ShipMethodID

        ///<summary>
        /// Credit card identification number. Foreign key to CreditCard.CreditCardID.
        ///</summary>
        public int? CreditCardId { get; set; } // CreditCardID

        ///<summary>
        /// Approval code provided by the credit card company.
        ///</summary>
        public string CreditCardApprovalCode { get; set; } // CreditCardApprovalCode (length: 15)

        ///<summary>
        /// Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
        ///</summary>
        public int? CurrencyRateId { get; set; } // CurrencyRateID

        ///<summary>
        /// Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
        ///</summary>
        public decimal SubTotal { get; set; } // SubTotal

        ///<summary>
        /// Tax amount.
        ///</summary>
        public decimal TaxAmt { get; set; } // TaxAmt

        ///<summary>
        /// Shipping cost.
        ///</summary>
        public decimal Freight { get; set; } // Freight

        ///<summary>
        /// Total due from customer. Computed as Subtotal + TaxAmt + Freight.
        ///</summary>
        public decimal TotalDue { get; private set; } // TotalDue

        ///<summary>
        /// Sales representative comments.
        ///</summary>
        public string Comment { get; set; } // Comment (length: 128)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderDetail> Sales_SalesOrderDetails { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeaderSalesReason> Sales_SalesOrderHeaderSalesReasons { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Person_Address BillToAddress { get; set; } // FK_SalesOrderHeader_Address_BillToAddressID
        public virtual Person_Address ShipToAddress { get; set; } // FK_SalesOrderHeader_Address_ShipToAddressID
        public virtual Purchasing_ShipMethod Purchasing_ShipMethod { get; set; } // FK_SalesOrderHeader_ShipMethod_ShipMethodID
        public virtual Sales_CreditCard Sales_CreditCard { get; set; } // FK_SalesOrderHeader_CreditCard_CreditCardID
        public virtual Sales_CurrencyRate Sales_CurrencyRate { get; set; } // FK_SalesOrderHeader_CurrencyRate_CurrencyRateID
        public virtual Sales_Customer Sales_Customer { get; set; } // FK_SalesOrderHeader_Customer_CustomerID
        public virtual Sales_SalesPerson Sales_SalesPerson { get; set; } // FK_SalesOrderHeader_SalesPerson_SalesPersonID
        public virtual Sales_SalesTerritory Sales_SalesTerritory { get; set; } // FK_SalesOrderHeader_SalesTerritory_TerritoryID

        public Sales_SalesOrderHeader()
        {
            RevisionNumber = 0;
            OrderDate = System.DateTime.Now;
            Status = 1;
            OnlineOrderFlag = true;
            SubTotal = 0.00m;
            TaxAmt = 0.00m;
            Freight = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderDetails = new System.Collections.Generic.List<Sales_SalesOrderDetail>();
            Sales_SalesOrderHeaderSalesReasons = new System.Collections.Generic.List<Sales_SalesOrderHeaderSalesReason>();
        }
    }

    // SalesOrderHeaderSalesReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesOrderHeaderSalesReason
    {

        ///<summary>
        /// Primary key. Foreign key to SalesOrderHeader.SalesOrderID.
        ///</summary>
        public int SalesOrderId { get; set; } // SalesOrderID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to SalesReason.SalesReasonID.
        ///</summary>
        public int SalesReasonId { get; set; } // SalesReasonID (Primary key)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Sales_SalesOrderHeader Sales_SalesOrderHeader { get; set; } // FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID
        public virtual Sales_SalesReason Sales_SalesReason { get; set; } // FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID

        public Sales_SalesOrderHeaderSalesReason()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesPerson
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesPerson
    {

        ///<summary>
        /// Primary key for SalesPerson records. Foreign key to Employee.BusinessEntityID
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Territory currently assigned to. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        public int? TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// Projected yearly sales.
        ///</summary>
        public decimal? SalesQuota { get; set; } // SalesQuota

        ///<summary>
        /// Bonus due if quota is met.
        ///</summary>
        public decimal Bonus { get; set; } // Bonus

        ///<summary>
        /// Commision percent received per sale.
        ///</summary>
        public decimal CommissionPct { get; set; } // CommissionPct

        ///<summary>
        /// Sales total year to date.
        ///</summary>
        public decimal SalesYtd { get; set; } // SalesYTD

        ///<summary>
        /// Sales total of previous year.
        ///</summary>
        public decimal SalesLastYear { get; set; } // SalesLastYear

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_SalesPerson_SalesPersonID
        public virtual System.Collections.Generic.ICollection<Sales_SalesPersonQuotaHistory> Sales_SalesPersonQuotaHistories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Sales_SalesTerritoryHistory> Sales_SalesTerritoryHistories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<Sales_Store> Sales_Stores { get; set; } // Store.FK_Store_SalesPerson_SalesPersonID

        // Foreign keys
        public virtual HumanResources_Employee HumanResources_Employee { get; set; } // FK_SalesPerson_Employee_BusinessEntityID
        public virtual Sales_SalesTerritory Sales_SalesTerritory { get; set; } // FK_SalesPerson_SalesTerritory_TerritoryID

        public Sales_SalesPerson()
        {
            Bonus = 0.00m;
            CommissionPct = 0.00m;
            SalesYtd = 0.00m;
            SalesLastYear = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
            Sales_SalesPersonQuotaHistories = new System.Collections.Generic.List<Sales_SalesPersonQuotaHistory>();
            Sales_SalesTerritoryHistories = new System.Collections.Generic.List<Sales_SalesTerritoryHistory>();
            Sales_Stores = new System.Collections.Generic.List<Sales_Store>();
        }
    }

    // SalesPersonQuotaHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesPersonQuotaHistory
    {

        ///<summary>
        /// Sales person identification number. Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Sales quota date.
        ///</summary>
        public System.DateTime QuotaDate { get; set; } // QuotaDate (Primary key)

        ///<summary>
        /// Sales quota amount.
        ///</summary>
        public decimal SalesQuota { get; set; } // SalesQuota

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Sales_SalesPerson Sales_SalesPerson { get; set; } // FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID

        public Sales_SalesPersonQuotaHistory()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesReason
    {

        ///<summary>
        /// Primary key for SalesReason records.
        ///</summary>
        public int SalesReasonId { get; set; } // SalesReasonID (Primary key)

        ///<summary>
        /// Sales reason description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// Category the sales reason belongs to.
        ///</summary>
        public string ReasonType { get; set; } // ReasonType (length: 50)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeaderSalesReason> Sales_SalesOrderHeaderSalesReasons { get; set; } // Many to many mapping

        public Sales_SalesReason()
        {
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderHeaderSalesReasons = new System.Collections.Generic.List<Sales_SalesOrderHeaderSalesReason>();
        }
    }

    // SalesTaxRate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesTaxRate
    {

        ///<summary>
        /// Primary key for SalesTaxRate records.
        ///</summary>
        public int SalesTaxRateId { get; set; } // SalesTaxRateID (Primary key)

        ///<summary>
        /// State, province, or country/region the sales tax applies to.
        ///</summary>
        public int StateProvinceId { get; set; } // StateProvinceID

        ///<summary>
        /// 1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.
        ///</summary>
        public byte TaxType { get; set; } // TaxType

        ///<summary>
        /// Tax rate amount.
        ///</summary>
        public decimal TaxRate { get; set; } // TaxRate

        ///<summary>
        /// Tax rate description.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Person_StateProvince Person_StateProvince { get; set; } // FK_SalesTaxRate_StateProvince_StateProvinceID

        public Sales_SalesTaxRate()
        {
            TaxRate = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SalesTerritory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesTerritory
    {

        ///<summary>
        /// Primary key for SalesTerritory records.
        ///</summary>
        public int TerritoryId { get; set; } // TerritoryID (Primary key)

        ///<summary>
        /// Sales territory description
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        public string CountryRegionCode { get; set; } // CountryRegionCode (length: 3)

        ///<summary>
        /// Geographic area to which the sales territory belong.
        ///</summary>
        public string Group { get; set; } // Group (length: 50)

        ///<summary>
        /// Sales in the territory year to date.
        ///</summary>
        public decimal SalesYtd { get; set; } // SalesYTD

        ///<summary>
        /// Sales in the territory the previous year.
        ///</summary>
        public decimal SalesLastYear { get; set; } // SalesLastYear

        ///<summary>
        /// Business costs in the territory year to date.
        ///</summary>
        public decimal CostYtd { get; set; } // CostYTD

        ///<summary>
        /// Business costs in the territory the previous year.
        ///</summary>
        public decimal CostLastYear { get; set; } // CostLastYear

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Person_StateProvince> Person_StateProvinces { get; set; } // StateProvince.FK_StateProvince_SalesTerritory_TerritoryID
        public virtual System.Collections.Generic.ICollection<Sales_Customer> Sales_Customers { get; set; } // Customer.FK_Customer_SalesTerritory_TerritoryID
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_SalesTerritory_TerritoryID
        public virtual System.Collections.Generic.ICollection<Sales_SalesPerson> Sales_SalesPersons { get; set; } // SalesPerson.FK_SalesPerson_SalesTerritory_TerritoryID
        public virtual System.Collections.Generic.ICollection<Sales_SalesTerritoryHistory> Sales_SalesTerritoryHistories { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Person_CountryRegion Person_CountryRegion { get; set; } // FK_SalesTerritory_CountryRegion_CountryRegionCode

        public Sales_SalesTerritory()
        {
            SalesYtd = 0.00m;
            SalesLastYear = 0.00m;
            CostYtd = 0.00m;
            CostLastYear = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_Customers = new System.Collections.Generic.List<Sales_Customer>();
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
            Sales_SalesPersons = new System.Collections.Generic.List<Sales_SalesPerson>();
            Sales_SalesTerritoryHistories = new System.Collections.Generic.List<Sales_SalesTerritoryHistory>();
            Person_StateProvinces = new System.Collections.Generic.List<Person_StateProvince>();
        }
    }

    // SalesTerritoryHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesTerritoryHistory
    {

        ///<summary>
        /// Primary key. The sales rep.  Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Primary key. Territory identification number. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        public int TerritoryId { get; set; } // TerritoryID (Primary key)

        ///<summary>
        /// Primary key. Date the sales representive started work in the territory.
        ///</summary>
        public System.DateTime StartDate { get; set; } // StartDate (Primary key)

        ///<summary>
        /// Date the sales representative left work in the territory.
        ///</summary>
        public System.DateTime? EndDate { get; set; } // EndDate

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Sales_SalesPerson Sales_SalesPerson { get; set; } // FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID
        public virtual Sales_SalesTerritory Sales_SalesTerritory { get; set; } // FK_SalesTerritoryHistory_SalesTerritory_TerritoryID

        public Sales_SalesTerritoryHistory()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

    // ShoppingCartItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_ShoppingCartItem
    {

        ///<summary>
        /// Primary key for ShoppingCartItem records.
        ///</summary>
        public int ShoppingCartItemId { get; set; } // ShoppingCartItemID (Primary key)

        ///<summary>
        /// Shopping cart identification number.
        ///</summary>
        public string ShoppingCartId { get; set; } // ShoppingCartID (length: 50)

        ///<summary>
        /// Product quantity ordered.
        ///</summary>
        public int Quantity { get; set; } // Quantity

        ///<summary>
        /// Product ordered. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID

        ///<summary>
        /// Date the time the record was created.
        ///</summary>
        public System.DateTime DateCreated { get; set; } // DateCreated

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys
        public virtual Production_Product Production_Product { get; set; } // FK_ShoppingCartItem_Product_ProductID

        public Sales_ShoppingCartItem()
        {
            Quantity = 1;
            DateCreated = System.DateTime.Now;
            ModifiedDate = System.DateTime.Now;
        }
    }

    // SpecialOffer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SpecialOffer
    {

        ///<summary>
        /// Primary key for SpecialOffer records.
        ///</summary>
        public int SpecialOfferId { get; set; } // SpecialOfferID (Primary key)

        ///<summary>
        /// Discount description.
        ///</summary>
        public string Description { get; set; } // Description (length: 255)

        ///<summary>
        /// Discount precentage.
        ///</summary>
        public decimal DiscountPct { get; set; } // DiscountPct

        ///<summary>
        /// Discount type category.
        ///</summary>
        public string Type { get; set; } // Type (length: 50)

        ///<summary>
        /// Group the discount applies to such as Reseller or Customer.
        ///</summary>
        public string Category { get; set; } // Category (length: 50)

        ///<summary>
        /// Discount start date.
        ///</summary>
        public System.DateTime StartDate { get; set; } // StartDate

        ///<summary>
        /// Discount end date.
        ///</summary>
        public System.DateTime EndDate { get; set; } // EndDate

        ///<summary>
        /// Minimum discount percent allowed.
        ///</summary>
        public int MinQty { get; set; } // MinQty

        ///<summary>
        /// Maximum discount percent allowed.
        ///</summary>
        public int? MaxQty { get; set; } // MaxQty

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Sales_SpecialOfferProduct> Sales_SpecialOfferProducts { get; set; } // Many to many mapping

        public Sales_SpecialOffer()
        {
            DiscountPct = 0.00m;
            MinQty = 0;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SpecialOfferProducts = new System.Collections.Generic.List<Sales_SpecialOfferProduct>();
        }
    }

    // SpecialOfferProduct
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SpecialOfferProduct
    {

        ///<summary>
        /// Primary key for SpecialOfferProduct records.
        ///</summary>
        public int SpecialOfferId { get; set; } // SpecialOfferID (Primary key)

        ///<summary>
        /// Product identification number. Foreign key to Product.ProductID.
        ///</summary>
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderDetail> Sales_SalesOrderDetails { get; set; } // SalesOrderDetail.FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID

        // Foreign keys
        public virtual Production_Product Production_Product { get; set; } // FK_SpecialOfferProduct_Product_ProductID
        public virtual Sales_SpecialOffer Sales_SpecialOffer { get; set; } // FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID

        public Sales_SpecialOfferProduct()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderDetails = new System.Collections.Generic.List<Sales_SalesOrderDetail>();
        }
    }

    // Store
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_Store
    {

        ///<summary>
        /// Primary key. Foreign key to Customer.BusinessEntityID.
        ///</summary>
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// Name of the store.
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ID of the sales person assigned to the customer. Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
        public int? SalesPersonId { get; set; } // SalesPersonID

        ///<summary>
        /// Demographic informationg about the store such as the number of employees, annual sales and store type.
        ///</summary>
        public string Demographics { get; set; } // Demographics

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Sales_Customer> Sales_Customers { get; set; } // Customer.FK_Customer_Store_StoreID

        // Foreign keys
        public virtual Person_BusinessEntity Person_BusinessEntity { get; set; } // FK_Store_BusinessEntity_BusinessEntityID
        public virtual Sales_SalesPerson Sales_SalesPerson { get; set; } // FK_Store_SalesPerson_SalesPersonID

        public Sales_Store()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_Customers = new System.Collections.Generic.List<Sales_Customer>();
        }
    }

    #endregion

    #region POCO Configuration

    // AWBuildVersion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AwBuildVersionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AwBuildVersion>
    {
        public AwBuildVersionConfiguration()
            : this("dbo")
        {
        }

        public AwBuildVersionConfiguration(string schema)
        {
            ToTable("AWBuildVersion", schema);
            HasKey(x => x.SystemInformationId);

            Property(x => x.SystemInformationId).HasColumnName(@"SystemInformationID").IsRequired().HasColumnType("tinyint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DatabaseVersion).HasColumnName(@"Database Version").IsRequired().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.VersionDate).HasColumnName(@"VersionDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // DatabaseLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class DatabaseLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DatabaseLog>
    {
        public DatabaseLogConfiguration()
            : this("dbo")
        {
        }

        public DatabaseLogConfiguration(string schema)
        {
            ToTable("DatabaseLog", schema);
            HasKey(x => x.DatabaseLogId);

            Property(x => x.DatabaseLogId).HasColumnName(@"DatabaseLogID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PostTime).HasColumnName(@"PostTime").IsRequired().HasColumnType("datetime");
            Property(x => x.DatabaseUser).HasColumnName(@"DatabaseUser").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Event).HasColumnName(@"Event").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Schema).HasColumnName(@"Schema").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Object).HasColumnName(@"Object").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Tsql).HasColumnName(@"TSQL").IsRequired().HasColumnType("nvarchar(max)");
            Property(x => x.XmlEvent).HasColumnName(@"XmlEvent").IsRequired().HasColumnType("xml");
        }
    }

    // ErrorLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ErrorLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ErrorLog>
    {
        public ErrorLogConfiguration()
            : this("dbo")
        {
        }

        public ErrorLogConfiguration(string schema)
        {
            ToTable("ErrorLog", schema);
            HasKey(x => x.ErrorLogId);

            Property(x => x.ErrorLogId).HasColumnName(@"ErrorLogID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ErrorTime).HasColumnName(@"ErrorTime").IsRequired().HasColumnType("datetime");
            Property(x => x.UserName).HasColumnName(@"UserName").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.ErrorNumber).HasColumnName(@"ErrorNumber").IsRequired().HasColumnType("int");
            Property(x => x.ErrorSeverity).HasColumnName(@"ErrorSeverity").IsOptional().HasColumnType("int");
            Property(x => x.ErrorState).HasColumnName(@"ErrorState").IsOptional().HasColumnType("int");
            Property(x => x.ErrorProcedure).HasColumnName(@"ErrorProcedure").IsOptional().HasColumnType("nvarchar").HasMaxLength(126);
            Property(x => x.ErrorLine).HasColumnName(@"ErrorLine").IsOptional().HasColumnType("int");
            Property(x => x.ErrorMessage).HasColumnName(@"ErrorMessage").IsRequired().HasColumnType("nvarchar").HasMaxLength(4000);
        }
    }

    // Department
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class HumanResources_DepartmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_Department>
    {
        public HumanResources_DepartmentConfiguration()
            : this("HumanResources")
        {
        }

        public HumanResources_DepartmentConfiguration(string schema)
        {
            ToTable("Department", schema);
            HasKey(x => x.DepartmentId);

            Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.GroupName).HasColumnName(@"GroupName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Employee
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class HumanResources_EmployeeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_Employee>
    {
        public HumanResources_EmployeeConfiguration()
            : this("HumanResources")
        {
        }

        public HumanResources_EmployeeConfiguration(string schema)
        {
            ToTable("Employee", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.NationalIdNumber).HasColumnName(@"NationalIDNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.LoginId).HasColumnName(@"LoginID").IsRequired().HasColumnType("nvarchar").HasMaxLength(256);
            Property(x => x.OrganizationNode).HasColumnName(@"OrganizationNode").IsOptional().HasColumnType("hierarchyid");
            Property(x => x.OrganizationLevel).HasColumnName(@"OrganizationLevel").IsOptional().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.JobTitle).HasColumnName(@"JobTitle").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.BirthDate).HasColumnName(@"BirthDate").IsRequired().HasColumnType("date");
            Property(x => x.MaritalStatus).HasColumnName(@"MaritalStatus").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(1);
            Property(x => x.Gender).HasColumnName(@"Gender").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(1);
            Property(x => x.HireDate).HasColumnName(@"HireDate").IsRequired().HasColumnType("date");
            Property(x => x.SalariedFlag).HasColumnName(@"SalariedFlag").IsRequired().HasColumnType("bit");
            Property(x => x.VacationHours).HasColumnName(@"VacationHours").IsRequired().HasColumnType("smallint");
            Property(x => x.SickLeaveHours).HasColumnName(@"SickLeaveHours").IsRequired().HasColumnType("smallint");
            Property(x => x.CurrentFlag).HasColumnName(@"CurrentFlag").IsRequired().HasColumnType("bit");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_Person).WithOptional(b => b.HumanResources_Employee).WillCascadeOnDelete(false); // FK_Employee_Person_BusinessEntityID
        }
    }

    // EmployeeDepartmentHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class HumanResources_EmployeeDepartmentHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_EmployeeDepartmentHistory>
    {
        public HumanResources_EmployeeDepartmentHistoryConfiguration()
            : this("HumanResources")
        {
        }

        public HumanResources_EmployeeDepartmentHistoryConfiguration(string schema)
        {
            ToTable("EmployeeDepartmentHistory", schema);
            HasKey(x => new { x.BusinessEntityId, x.StartDate, x.DepartmentId, x.ShiftId });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ShiftId).HasColumnName(@"ShiftID").IsRequired().HasColumnType("tinyint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("date").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsOptional().HasColumnType("date");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.HumanResources_Department).WithMany(b => b.HumanResources_EmployeeDepartmentHistories).HasForeignKey(c => c.DepartmentId).WillCascadeOnDelete(false); // FK_EmployeeDepartmentHistory_Department_DepartmentID
            HasRequired(a => a.HumanResources_Employee).WithMany(b => b.HumanResources_EmployeeDepartmentHistories).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_EmployeeDepartmentHistory_Employee_BusinessEntityID
            HasRequired(a => a.HumanResources_Shift).WithMany(b => b.HumanResources_EmployeeDepartmentHistories).HasForeignKey(c => c.ShiftId).WillCascadeOnDelete(false); // FK_EmployeeDepartmentHistory_Shift_ShiftID
        }
    }

    // EmployeePayHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class HumanResources_EmployeePayHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_EmployeePayHistory>
    {
        public HumanResources_EmployeePayHistoryConfiguration()
            : this("HumanResources")
        {
        }

        public HumanResources_EmployeePayHistoryConfiguration(string schema)
        {
            ToTable("EmployeePayHistory", schema);
            HasKey(x => new { x.BusinessEntityId, x.RateChangeDate });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RateChangeDate).HasColumnName(@"RateChangeDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Rate).HasColumnName(@"Rate").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.PayFrequency).HasColumnName(@"PayFrequency").IsRequired().HasColumnType("tinyint");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.HumanResources_Employee).WithMany(b => b.HumanResources_EmployeePayHistories).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_EmployeePayHistory_Employee_BusinessEntityID
        }
    }

    // JobCandidate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class HumanResources_JobCandidateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_JobCandidate>
    {
        public HumanResources_JobCandidateConfiguration()
            : this("HumanResources")
        {
        }

        public HumanResources_JobCandidateConfiguration(string schema)
        {
            ToTable("JobCandidate", schema);
            HasKey(x => x.JobCandidateId);

            Property(x => x.JobCandidateId).HasColumnName(@"JobCandidateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsOptional().HasColumnType("int");
            Property(x => x.Resume).HasColumnName(@"Resume").IsOptional().HasColumnType("xml");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.HumanResources_Employee).WithMany(b => b.HumanResources_JobCandidates).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_JobCandidate_Employee_BusinessEntityID
        }
    }

    // Shift
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class HumanResources_ShiftConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<HumanResources_Shift>
    {
        public HumanResources_ShiftConfiguration()
            : this("HumanResources")
        {
        }

        public HumanResources_ShiftConfiguration(string schema)
        {
            ToTable("Shift", schema);
            HasKey(x => x.ShiftId);

            Property(x => x.ShiftId).HasColumnName(@"ShiftID").IsRequired().HasColumnType("tinyint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StartTime).HasColumnName(@"StartTime").IsRequired().HasColumnType("time");
            Property(x => x.EndTime).HasColumnName(@"EndTime").IsRequired().HasColumnType("time");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Address
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_AddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_Address>
    {
        public Person_AddressConfiguration()
            : this("Person")
        {
        }

        public Person_AddressConfiguration(string schema)
        {
            ToTable("Address", schema);
            HasKey(x => x.AddressId);

            Property(x => x.AddressId).HasColumnName(@"AddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AddressLine1).HasColumnName(@"AddressLine1").IsRequired().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.AddressLine2).HasColumnName(@"AddressLine2").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.City).HasColumnName(@"City").IsRequired().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.StateProvinceId).HasColumnName(@"StateProvinceID").IsRequired().HasColumnType("int");
            Property(x => x.PostalCode).HasColumnName(@"PostalCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.SpatialLocation).HasColumnName(@"SpatialLocation").IsOptional().HasColumnType("geography");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_StateProvince).WithMany(b => b.Person_Addresses).HasForeignKey(c => c.StateProvinceId).WillCascadeOnDelete(false); // FK_Address_StateProvince_StateProvinceID
        }
    }

    // AddressType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_AddressTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_AddressType>
    {
        public Person_AddressTypeConfiguration()
            : this("Person")
        {
        }

        public Person_AddressTypeConfiguration(string schema)
        {
            ToTable("AddressType", schema);
            HasKey(x => x.AddressTypeId);

            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // BusinessEntity
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_BusinessEntityConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_BusinessEntity>
    {
        public Person_BusinessEntityConfiguration()
            : this("Person")
        {
        }

        public Person_BusinessEntityConfiguration(string schema)
        {
            ToTable("BusinessEntity", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // BusinessEntityAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_BusinessEntityAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_BusinessEntityAddress>
    {
        public Person_BusinessEntityAddressConfiguration()
            : this("Person")
        {
        }

        public Person_BusinessEntityAddressConfiguration(string schema)
        {
            ToTable("BusinessEntityAddress", schema);
            HasKey(x => new { x.BusinessEntityId, x.AddressId, x.AddressTypeId });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressId).HasColumnName(@"AddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AddressTypeId).HasColumnName(@"AddressTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_Address).WithMany(b => b.Person_BusinessEntityAddresses).HasForeignKey(c => c.AddressId).WillCascadeOnDelete(false); // FK_BusinessEntityAddress_Address_AddressID
            HasRequired(a => a.Person_AddressType).WithMany(b => b.Person_BusinessEntityAddresses).HasForeignKey(c => c.AddressTypeId).WillCascadeOnDelete(false); // FK_BusinessEntityAddress_AddressType_AddressTypeID
            HasRequired(a => a.Person_BusinessEntity).WithMany(b => b.Person_BusinessEntityAddresses).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID
        }
    }

    // BusinessEntityContact
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_BusinessEntityContactConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_BusinessEntityContact>
    {
        public Person_BusinessEntityContactConfiguration()
            : this("Person")
        {
        }

        public Person_BusinessEntityContactConfiguration(string schema)
        {
            ToTable("BusinessEntityContact", schema);
            HasKey(x => new { x.BusinessEntityId, x.PersonId, x.ContactTypeId });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonId).HasColumnName(@"PersonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ContactTypeId).HasColumnName(@"ContactTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_BusinessEntity).WithMany(b => b.Person_BusinessEntityContacts).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_BusinessEntityContact_BusinessEntity_BusinessEntityID
            HasRequired(a => a.Person_ContactType).WithMany(b => b.Person_BusinessEntityContacts).HasForeignKey(c => c.ContactTypeId).WillCascadeOnDelete(false); // FK_BusinessEntityContact_ContactType_ContactTypeID
            HasRequired(a => a.Person_Person).WithMany(b => b.Person_BusinessEntityContacts).HasForeignKey(c => c.PersonId).WillCascadeOnDelete(false); // FK_BusinessEntityContact_Person_PersonID
        }
    }

    // ContactType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_ContactTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_ContactType>
    {
        public Person_ContactTypeConfiguration()
            : this("Person")
        {
        }

        public Person_ContactTypeConfiguration(string schema)
        {
            ToTable("ContactType", schema);
            HasKey(x => x.ContactTypeId);

            Property(x => x.ContactTypeId).HasColumnName(@"ContactTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // CountryRegion
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_CountryRegionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_CountryRegion>
    {
        public Person_CountryRegionConfiguration()
            : this("Person")
        {
        }

        public Person_CountryRegionConfiguration(string schema)
        {
            ToTable("CountryRegion", schema);
            HasKey(x => x.CountryRegionCode);

            Property(x => x.CountryRegionCode).HasColumnName(@"CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // EmailAddress
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_EmailAddressConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_EmailAddress>
    {
        public Person_EmailAddressConfiguration()
            : this("Person")
        {
        }

        public Person_EmailAddressConfiguration(string schema)
        {
            ToTable("EmailAddress", schema);
            HasKey(x => new { x.BusinessEntityId, x.EmailAddressId });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EmailAddressId).HasColumnName(@"EmailAddressID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_Person).WithMany(b => b.Person_EmailAddresses).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_EmailAddress_Person_BusinessEntityID
        }
    }

    // Password
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_PasswordConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_Password>
    {
        public Person_PasswordConfiguration()
            : this("Person")
        {
        }

        public Person_PasswordConfiguration(string schema)
        {
            ToTable("Password", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(128);
            Property(x => x.PasswordSalt).HasColumnName(@"PasswordSalt").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_Person).WithOptional(b => b.Person_Password).WillCascadeOnDelete(false); // FK_Password_Person_BusinessEntityID
        }
    }

    // Person
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_PersonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_Person>
    {
        public Person_PersonConfiguration()
            : this("Person")
        {
        }

        public Person_PersonConfiguration(string schema)
        {
            ToTable("Person", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PersonType).HasColumnName(@"PersonType").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(2);
            Property(x => x.NameStyle).HasColumnName(@"NameStyle").IsRequired().HasColumnType("bit");
            Property(x => x.Title).HasColumnName(@"Title").IsOptional().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.FirstName).HasColumnName(@"FirstName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LastName).HasColumnName(@"LastName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Suffix).HasColumnName(@"Suffix").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.EmailPromotion).HasColumnName(@"EmailPromotion").IsRequired().HasColumnType("int");
            Property(x => x.AdditionalContactInfo).HasColumnName(@"AdditionalContactInfo").IsOptional().HasColumnType("xml");
            Property(x => x.Demographics).HasColumnName(@"Demographics").IsOptional().HasColumnType("xml");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_BusinessEntity).WithOptional(b => b.Person_Person).WillCascadeOnDelete(false); // FK_Person_BusinessEntity_BusinessEntityID
        }
    }

    // PersonPhone
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_PersonPhoneConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_PersonPhone>
    {
        public Person_PersonPhoneConfiguration()
            : this("Person")
        {
        }

        public Person_PersonPhoneConfiguration(string schema)
        {
            ToTable("PersonPhone", schema);
            HasKey(x => new { x.BusinessEntityId, x.PhoneNumber, x.PhoneNumberTypeId });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(25).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PhoneNumberTypeId).HasColumnName(@"PhoneNumberTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_Person).WithMany(b => b.Person_PersonPhones).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_PersonPhone_Person_BusinessEntityID
            HasRequired(a => a.Person_PhoneNumberType).WithMany(b => b.Person_PersonPhones).HasForeignKey(c => c.PhoneNumberTypeId).WillCascadeOnDelete(false); // FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID
        }
    }

    // PhoneNumberType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_PhoneNumberTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_PhoneNumberType>
    {
        public Person_PhoneNumberTypeConfiguration()
            : this("Person")
        {
        }

        public Person_PhoneNumberTypeConfiguration(string schema)
        {
            ToTable("PhoneNumberType", schema);
            HasKey(x => x.PhoneNumberTypeId);

            Property(x => x.PhoneNumberTypeId).HasColumnName(@"PhoneNumberTypeID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // StateProvince
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Person_StateProvinceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Person_StateProvince>
    {
        public Person_StateProvinceConfiguration()
            : this("Person")
        {
        }

        public Person_StateProvinceConfiguration(string schema)
        {
            ToTable("StateProvince", schema);
            HasKey(x => x.StateProvinceId);

            Property(x => x.StateProvinceId).HasColumnName(@"StateProvinceID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.StateProvinceCode).HasColumnName(@"StateProvinceCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.CountryRegionCode).HasColumnName(@"CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3);
            Property(x => x.IsOnlyStateProvinceFlag).HasColumnName(@"IsOnlyStateProvinceFlag").IsRequired().HasColumnType("bit");
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").IsRequired().HasColumnType("int");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_CountryRegion).WithMany(b => b.Person_StateProvinces).HasForeignKey(c => c.CountryRegionCode).WillCascadeOnDelete(false); // FK_StateProvince_CountryRegion_CountryRegionCode
            HasRequired(a => a.Sales_SalesTerritory).WithMany(b => b.Person_StateProvinces).HasForeignKey(c => c.TerritoryId).WillCascadeOnDelete(false); // FK_StateProvince_SalesTerritory_TerritoryID
        }
    }

    // BillOfMaterials
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_BillOfMaterialConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_BillOfMaterial>
    {
        public Production_BillOfMaterialConfiguration()
            : this("Production")
        {
        }

        public Production_BillOfMaterialConfiguration(string schema)
        {
            ToTable("BillOfMaterials", schema);
            HasKey(x => x.BillOfMaterialsId);

            Property(x => x.BillOfMaterialsId).HasColumnName(@"BillOfMaterialsID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductAssemblyId).HasColumnName(@"ProductAssemblyID").IsOptional().HasColumnType("int");
            Property(x => x.ComponentId).HasColumnName(@"ComponentID").IsRequired().HasColumnType("int");
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.UnitMeasureCode).HasColumnName(@"UnitMeasureCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.BomLevel).HasColumnName(@"BOMLevel").IsRequired().HasColumnType("smallint");
            Property(x => x.PerAssemblyQty).HasColumnName(@"PerAssemblyQty").IsRequired().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.ProductAssembly).WithMany(b => b.ProductAssembly).HasForeignKey(c => c.ProductAssemblyId).WillCascadeOnDelete(false); // FK_BillOfMaterials_Product_ProductAssemblyID
            HasRequired(a => a.Component).WithMany(b => b.Component).HasForeignKey(c => c.ComponentId).WillCascadeOnDelete(false); // FK_BillOfMaterials_Product_ComponentID
            HasRequired(a => a.Production_UnitMeasure).WithMany(b => b.Production_BillOfMaterials).HasForeignKey(c => c.UnitMeasureCode).WillCascadeOnDelete(false); // FK_BillOfMaterials_UnitMeasure_UnitMeasureCode
        }
    }

    // Culture
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_CultureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_Culture>
    {
        public Production_CultureConfiguration()
            : this("Production")
        {
        }

        public Production_CultureConfiguration(string schema)
        {
            ToTable("Culture", schema);
            HasKey(x => x.CultureId);

            Property(x => x.CultureId).HasColumnName(@"CultureID").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(6).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Document
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_DocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_Document>
    {
        public Production_DocumentConfiguration()
            : this("Production")
        {
        }

        public Production_DocumentConfiguration(string schema)
        {
            ToTable("Document", schema);
            HasKey(x => x.DocumentNode);

            Property(x => x.DocumentNode).HasColumnName(@"DocumentNode").IsRequired().HasColumnType("hierarchyid").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DocumentLevel).HasColumnName(@"DocumentLevel").IsOptional().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.Title).HasColumnName(@"Title").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Owner).HasColumnName(@"Owner").IsRequired().HasColumnType("int");
            Property(x => x.FolderFlag).HasColumnName(@"FolderFlag").IsRequired().HasColumnType("bit");
            Property(x => x.FileName).HasColumnName(@"FileName").IsRequired().HasColumnType("nvarchar").HasMaxLength(400);
            Property(x => x.FileExtension).HasColumnName(@"FileExtension").IsRequired().HasColumnType("nvarchar").HasMaxLength(8);
            Property(x => x.Revision).HasColumnName(@"Revision").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(5);
            Property(x => x.ChangeNumber).HasColumnName(@"ChangeNumber").IsRequired().HasColumnType("int");
            Property(x => x.Status).HasColumnName(@"Status").IsRequired().HasColumnType("tinyint");
            Property(x => x.DocumentSummary).HasColumnName(@"DocumentSummary").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Document).HasColumnName(@"Document").IsOptional().HasColumnType("varbinary");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.HumanResources_Employee).WithMany(b => b.Production_Documents).HasForeignKey(c => c.Owner).WillCascadeOnDelete(false); // FK_Document_Employee_Owner
        }
    }

    // Illustration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_IllustrationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_Illustration>
    {
        public Production_IllustrationConfiguration()
            : this("Production")
        {
        }

        public Production_IllustrationConfiguration(string schema)
        {
            ToTable("Illustration", schema);
            HasKey(x => x.IllustrationId);

            Property(x => x.IllustrationId).HasColumnName(@"IllustrationID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Diagram).HasColumnName(@"Diagram").IsOptional().HasColumnType("xml");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Location
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_LocationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_Location>
    {
        public Production_LocationConfiguration()
            : this("Production")
        {
        }

        public Production_LocationConfiguration(string schema)
        {
            ToTable("Location", schema);
            HasKey(x => x.LocationId);

            Property(x => x.LocationId).HasColumnName(@"LocationID").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CostRate).HasColumnName(@"CostRate").IsRequired().HasColumnType("smallmoney").HasPrecision(10,4);
            Property(x => x.Availability).HasColumnName(@"Availability").IsRequired().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Product
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_Product>
    {
        public Production_ProductConfiguration()
            : this("Production")
        {
        }

        public Production_ProductConfiguration(string schema)
        {
            ToTable("Product", schema);
            HasKey(x => x.ProductId);

            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ProductNumber).HasColumnName(@"ProductNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.MakeFlag).HasColumnName(@"MakeFlag").IsRequired().HasColumnType("bit");
            Property(x => x.FinishedGoodsFlag).HasColumnName(@"FinishedGoodsFlag").IsRequired().HasColumnType("bit");
            Property(x => x.Color).HasColumnName(@"Color").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.SafetyStockLevel).HasColumnName(@"SafetyStockLevel").IsRequired().HasColumnType("smallint");
            Property(x => x.ReorderPoint).HasColumnName(@"ReorderPoint").IsRequired().HasColumnType("smallint");
            Property(x => x.StandardCost).HasColumnName(@"StandardCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ListPrice).HasColumnName(@"ListPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Size).HasColumnName(@"Size").IsOptional().HasColumnType("nvarchar").HasMaxLength(5);
            Property(x => x.SizeUnitMeasureCode).HasColumnName(@"SizeUnitMeasureCode").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.WeightUnitMeasureCode).HasColumnName(@"WeightUnitMeasureCode").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.Weight).HasColumnName(@"Weight").IsOptional().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.DaysToManufacture).HasColumnName(@"DaysToManufacture").IsRequired().HasColumnType("int");
            Property(x => x.ProductLine).HasColumnName(@"ProductLine").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(2);
            Property(x => x.Class).HasColumnName(@"Class").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(2);
            Property(x => x.Style).HasColumnName(@"Style").IsOptional().IsFixedLength().HasColumnType("nchar").HasMaxLength(2);
            Property(x => x.ProductSubcategoryId).HasColumnName(@"ProductSubcategoryID").IsOptional().HasColumnType("int");
            Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").IsOptional().HasColumnType("int");
            Property(x => x.SellStartDate).HasColumnName(@"SellStartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.SellEndDate).HasColumnName(@"SellEndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.DiscontinuedDate).HasColumnName(@"DiscontinuedDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.Production_ProductModel).WithMany(b => b.Production_Products).HasForeignKey(c => c.ProductModelId).WillCascadeOnDelete(false); // FK_Product_ProductModel_ProductModelID
            HasOptional(a => a.Production_ProductSubcategory).WithMany(b => b.Production_Products).HasForeignKey(c => c.ProductSubcategoryId).WillCascadeOnDelete(false); // FK_Product_ProductSubcategory_ProductSubcategoryID
            HasOptional(a => a.Production_UnitMeasure_SizeUnitMeasureCode).WithMany(b => b.SizeUnitMeasureCode).HasForeignKey(c => c.SizeUnitMeasureCode).WillCascadeOnDelete(false); // FK_Product_UnitMeasure_SizeUnitMeasureCode
            HasOptional(a => a.Production_UnitMeasure_WeightUnitMeasureCode).WithMany(b => b.WeightUnitMeasureCode).HasForeignKey(c => c.WeightUnitMeasureCode).WillCascadeOnDelete(false); // FK_Product_UnitMeasure_WeightUnitMeasureCode
        }
    }

    // ProductCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductCategory>
    {
        public Production_ProductCategoryConfiguration()
            : this("Production")
        {
        }

        public Production_ProductCategoryConfiguration(string schema)
        {
            ToTable("ProductCategory", schema);
            HasKey(x => x.ProductCategoryId);

            Property(x => x.ProductCategoryId).HasColumnName(@"ProductCategoryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // ProductCostHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductCostHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductCostHistory>
    {
        public Production_ProductCostHistoryConfiguration()
            : this("Production")
        {
        }

        public Production_ProductCostHistoryConfiguration(string schema)
        {
            ToTable("ProductCostHistory", schema);
            HasKey(x => new { x.ProductId, x.StartDate });

            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.StandardCost).HasColumnName(@"StandardCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Production_Product).WithMany(b => b.Production_ProductCostHistories).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ProductCostHistory_Product_ProductID
        }
    }

    // ProductDescription
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductDescriptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductDescription>
    {
        public Production_ProductDescriptionConfiguration()
            : this("Production")
        {
        }

        public Production_ProductDescriptionConfiguration(string schema)
        {
            ToTable("ProductDescription", schema);
            HasKey(x => x.ProductDescriptionId);

            Property(x => x.ProductDescriptionId).HasColumnName(@"ProductDescriptionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").IsRequired().HasColumnType("nvarchar").HasMaxLength(400);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // ProductDocument
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductDocumentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductDocument>
    {
        public Production_ProductDocumentConfiguration()
            : this("Production")
        {
        }

        public Production_ProductDocumentConfiguration(string schema)
        {
            ToTable("ProductDocument", schema);
            HasKey(x => new { x.ProductId, x.DocumentNode });

            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DocumentNode).HasColumnName(@"DocumentNode").IsRequired().HasColumnType("hierarchyid").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Production_Document).WithMany(b => b.Production_ProductDocuments).HasForeignKey(c => c.DocumentNode).WillCascadeOnDelete(false); // FK_ProductDocument_Document_DocumentNode
            HasRequired(a => a.Production_Product).WithMany(b => b.Production_ProductDocuments).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ProductDocument_Product_ProductID
        }
    }

    // ProductInventory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductInventoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductInventory>
    {
        public Production_ProductInventoryConfiguration()
            : this("Production")
        {
        }

        public Production_ProductInventoryConfiguration(string schema)
        {
            ToTable("ProductInventory", schema);
            HasKey(x => new { x.ProductId, x.LocationId });

            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocationId).HasColumnName(@"LocationID").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Shelf).HasColumnName(@"Shelf").IsRequired().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.Bin).HasColumnName(@"Bin").IsRequired().HasColumnType("tinyint");
            Property(x => x.Quantity).HasColumnName(@"Quantity").IsRequired().HasColumnType("smallint");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Production_Location).WithMany(b => b.Production_ProductInventories).HasForeignKey(c => c.LocationId).WillCascadeOnDelete(false); // FK_ProductInventory_Location_LocationID
            HasRequired(a => a.Production_Product).WithMany(b => b.Production_ProductInventories).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ProductInventory_Product_ProductID
        }
    }

    // ProductListPriceHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductListPriceHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductListPriceHistory>
    {
        public Production_ProductListPriceHistoryConfiguration()
            : this("Production")
        {
        }

        public Production_ProductListPriceHistoryConfiguration(string schema)
        {
            ToTable("ProductListPriceHistory", schema);
            HasKey(x => new { x.ProductId, x.StartDate });

            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.ListPrice).HasColumnName(@"ListPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Production_Product).WithMany(b => b.Production_ProductListPriceHistories).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ProductListPriceHistory_Product_ProductID
        }
    }

    // ProductModel
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductModelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductModel>
    {
        public Production_ProductModelConfiguration()
            : this("Production")
        {
        }

        public Production_ProductModelConfiguration(string schema)
        {
            ToTable("ProductModel", schema);
            HasKey(x => x.ProductModelId);

            Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CatalogDescription).HasColumnName(@"CatalogDescription").IsOptional().HasColumnType("xml");
            Property(x => x.Instructions).HasColumnName(@"Instructions").IsOptional().HasColumnType("xml");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // ProductModelIllustration
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductModelIllustrationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductModelIllustration>
    {
        public Production_ProductModelIllustrationConfiguration()
            : this("Production")
        {
        }

        public Production_ProductModelIllustrationConfiguration(string schema)
        {
            ToTable("ProductModelIllustration", schema);
            HasKey(x => new { x.ProductModelId, x.IllustrationId });

            Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IllustrationId).HasColumnName(@"IllustrationID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Production_Illustration).WithMany(b => b.Production_ProductModelIllustrations).HasForeignKey(c => c.IllustrationId).WillCascadeOnDelete(false); // FK_ProductModelIllustration_Illustration_IllustrationID
            HasRequired(a => a.Production_ProductModel).WithMany(b => b.Production_ProductModelIllustrations).HasForeignKey(c => c.ProductModelId).WillCascadeOnDelete(false); // FK_ProductModelIllustration_ProductModel_ProductModelID
        }
    }

    // ProductModelProductDescriptionCulture
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductModelProductDescriptionCultureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductModelProductDescriptionCulture>
    {
        public Production_ProductModelProductDescriptionCultureConfiguration()
            : this("Production")
        {
        }

        public Production_ProductModelProductDescriptionCultureConfiguration(string schema)
        {
            ToTable("ProductModelProductDescriptionCulture", schema);
            HasKey(x => new { x.ProductModelId, x.ProductDescriptionId, x.CultureId });

            Property(x => x.ProductModelId).HasColumnName(@"ProductModelID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductDescriptionId).HasColumnName(@"ProductDescriptionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CultureId).HasColumnName(@"CultureID").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(6).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Production_Culture).WithMany(b => b.Production_ProductModelProductDescriptionCultures).HasForeignKey(c => c.CultureId).WillCascadeOnDelete(false); // FK_ProductModelProductDescriptionCulture_Culture_CultureID
            HasRequired(a => a.Production_ProductDescription).WithMany(b => b.Production_ProductModelProductDescriptionCultures).HasForeignKey(c => c.ProductDescriptionId).WillCascadeOnDelete(false); // FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID
            HasRequired(a => a.Production_ProductModel).WithMany(b => b.Production_ProductModelProductDescriptionCultures).HasForeignKey(c => c.ProductModelId).WillCascadeOnDelete(false); // FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID
        }
    }

    // ProductPhoto
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductPhotoConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductPhoto>
    {
        public Production_ProductPhotoConfiguration()
            : this("Production")
        {
        }

        public Production_ProductPhotoConfiguration(string schema)
        {
            ToTable("ProductPhoto", schema);
            HasKey(x => x.ProductPhotoId);

            Property(x => x.ProductPhotoId).HasColumnName(@"ProductPhotoID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ThumbNailPhoto).HasColumnName(@"ThumbNailPhoto").IsOptional().HasColumnType("varbinary");
            Property(x => x.ThumbnailPhotoFileName).HasColumnName(@"ThumbnailPhotoFileName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LargePhoto).HasColumnName(@"LargePhoto").IsOptional().HasColumnType("varbinary");
            Property(x => x.LargePhotoFileName).HasColumnName(@"LargePhotoFileName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // ProductProductPhoto
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductProductPhotoConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductProductPhoto>
    {
        public Production_ProductProductPhotoConfiguration()
            : this("Production")
        {
        }

        public Production_ProductProductPhotoConfiguration(string schema)
        {
            ToTable("ProductProductPhoto", schema);
            HasKey(x => new { x.ProductId, x.ProductPhotoId });

            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductPhotoId).HasColumnName(@"ProductPhotoID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Primary).HasColumnName(@"Primary").IsRequired().HasColumnType("bit");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Production_Product).WithMany(b => b.Production_ProductProductPhotoes).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ProductProductPhoto_Product_ProductID
            HasRequired(a => a.Production_ProductPhoto).WithMany(b => b.Production_ProductProductPhotoes).HasForeignKey(c => c.ProductPhotoId).WillCascadeOnDelete(false); // FK_ProductProductPhoto_ProductPhoto_ProductPhotoID
        }
    }

    // ProductReview
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductReviewConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductReview>
    {
        public Production_ProductReviewConfiguration()
            : this("Production")
        {
        }

        public Production_ProductReviewConfiguration(string schema)
        {
            ToTable("ProductReview", schema);
            HasKey(x => x.ProductReviewId);

            Property(x => x.ProductReviewId).HasColumnName(@"ProductReviewID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int");
            Property(x => x.ReviewerName).HasColumnName(@"ReviewerName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ReviewDate).HasColumnName(@"ReviewDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EmailAddress).HasColumnName(@"EmailAddress").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rating).HasColumnName(@"Rating").IsRequired().HasColumnType("int");
            Property(x => x.Comments).HasColumnName(@"Comments").IsOptional().HasColumnType("nvarchar").HasMaxLength(3850);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Production_Product).WithMany(b => b.Production_ProductReviews).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ProductReview_Product_ProductID
        }
    }

    // ProductSubcategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ProductSubcategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ProductSubcategory>
    {
        public Production_ProductSubcategoryConfiguration()
            : this("Production")
        {
        }

        public Production_ProductSubcategoryConfiguration(string schema)
        {
            ToTable("ProductSubcategory", schema);
            HasKey(x => x.ProductSubcategoryId);

            Property(x => x.ProductSubcategoryId).HasColumnName(@"ProductSubcategoryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductCategoryId).HasColumnName(@"ProductCategoryID").IsRequired().HasColumnType("int");
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Production_ProductCategory).WithMany(b => b.Production_ProductSubcategories).HasForeignKey(c => c.ProductCategoryId).WillCascadeOnDelete(false); // FK_ProductSubcategory_ProductCategory_ProductCategoryID
        }
    }

    // ScrapReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_ScrapReasonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_ScrapReason>
    {
        public Production_ScrapReasonConfiguration()
            : this("Production")
        {
        }

        public Production_ScrapReasonConfiguration(string schema)
        {
            ToTable("ScrapReason", schema);
            HasKey(x => x.ScrapReasonId);

            Property(x => x.ScrapReasonId).HasColumnName(@"ScrapReasonID").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // TransactionHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_TransactionHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_TransactionHistory>
    {
        public Production_TransactionHistoryConfiguration()
            : this("Production")
        {
        }

        public Production_TransactionHistoryConfiguration(string schema)
        {
            ToTable("TransactionHistory", schema);
            HasKey(x => x.TransactionId);

            Property(x => x.TransactionId).HasColumnName(@"TransactionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int");
            Property(x => x.ReferenceOrderId).HasColumnName(@"ReferenceOrderID").IsRequired().HasColumnType("int");
            Property(x => x.ReferenceOrderLineId).HasColumnName(@"ReferenceOrderLineID").IsRequired().HasColumnType("int");
            Property(x => x.TransactionDate).HasColumnName(@"TransactionDate").IsRequired().HasColumnType("datetime");
            Property(x => x.TransactionType).HasColumnName(@"TransactionType").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(1);
            Property(x => x.Quantity).HasColumnName(@"Quantity").IsRequired().HasColumnType("int");
            Property(x => x.ActualCost).HasColumnName(@"ActualCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Production_Product).WithMany(b => b.Production_TransactionHistories).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_TransactionHistory_Product_ProductID
        }
    }

    // TransactionHistoryArchive
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_TransactionHistoryArchiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_TransactionHistoryArchive>
    {
        public Production_TransactionHistoryArchiveConfiguration()
            : this("Production")
        {
        }

        public Production_TransactionHistoryArchiveConfiguration(string schema)
        {
            ToTable("TransactionHistoryArchive", schema);
            HasKey(x => x.TransactionId);

            Property(x => x.TransactionId).HasColumnName(@"TransactionID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int");
            Property(x => x.ReferenceOrderId).HasColumnName(@"ReferenceOrderID").IsRequired().HasColumnType("int");
            Property(x => x.ReferenceOrderLineId).HasColumnName(@"ReferenceOrderLineID").IsRequired().HasColumnType("int");
            Property(x => x.TransactionDate).HasColumnName(@"TransactionDate").IsRequired().HasColumnType("datetime");
            Property(x => x.TransactionType).HasColumnName(@"TransactionType").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(1);
            Property(x => x.Quantity).HasColumnName(@"Quantity").IsRequired().HasColumnType("int");
            Property(x => x.ActualCost).HasColumnName(@"ActualCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // UnitMeasure
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_UnitMeasureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_UnitMeasure>
    {
        public Production_UnitMeasureConfiguration()
            : this("Production")
        {
        }

        public Production_UnitMeasureConfiguration(string schema)
        {
            ToTable("UnitMeasure", schema);
            HasKey(x => x.UnitMeasureCode);

            Property(x => x.UnitMeasureCode).HasColumnName(@"UnitMeasureCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // WorkOrder
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_WorkOrderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_WorkOrder>
    {
        public Production_WorkOrderConfiguration()
            : this("Production")
        {
        }

        public Production_WorkOrderConfiguration(string schema)
        {
            ToTable("WorkOrder", schema);
            HasKey(x => x.WorkOrderId);

            Property(x => x.WorkOrderId).HasColumnName(@"WorkOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int");
            Property(x => x.OrderQty).HasColumnName(@"OrderQty").IsRequired().HasColumnType("int");
            Property(x => x.StockedQty).HasColumnName(@"StockedQty").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.ScrappedQty).HasColumnName(@"ScrappedQty").IsRequired().HasColumnType("smallint");
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.DueDate).HasColumnName(@"DueDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ScrapReasonId).HasColumnName(@"ScrapReasonID").IsOptional().HasColumnType("smallint");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.Production_ScrapReason).WithMany(b => b.Production_WorkOrders).HasForeignKey(c => c.ScrapReasonId).WillCascadeOnDelete(false); // FK_WorkOrder_ScrapReason_ScrapReasonID
            HasRequired(a => a.Production_Product).WithMany(b => b.Production_WorkOrders).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_WorkOrder_Product_ProductID
        }
    }

    // WorkOrderRouting
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Production_WorkOrderRoutingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Production_WorkOrderRouting>
    {
        public Production_WorkOrderRoutingConfiguration()
            : this("Production")
        {
        }

        public Production_WorkOrderRoutingConfiguration(string schema)
        {
            ToTable("WorkOrderRouting", schema);
            HasKey(x => new { x.WorkOrderId, x.ProductId, x.OperationSequence });

            Property(x => x.WorkOrderId).HasColumnName(@"WorkOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.OperationSequence).HasColumnName(@"OperationSequence").IsRequired().HasColumnType("smallint").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LocationId).HasColumnName(@"LocationID").IsRequired().HasColumnType("smallint");
            Property(x => x.ScheduledStartDate).HasColumnName(@"ScheduledStartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ScheduledEndDate).HasColumnName(@"ScheduledEndDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ActualStartDate).HasColumnName(@"ActualStartDate").IsOptional().HasColumnType("datetime");
            Property(x => x.ActualEndDate).HasColumnName(@"ActualEndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.ActualResourceHrs).HasColumnName(@"ActualResourceHrs").IsOptional().HasColumnType("decimal").HasPrecision(9,4);
            Property(x => x.PlannedCost).HasColumnName(@"PlannedCost").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ActualCost).HasColumnName(@"ActualCost").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Production_Location).WithMany(b => b.Production_WorkOrderRoutings).HasForeignKey(c => c.LocationId).WillCascadeOnDelete(false); // FK_WorkOrderRouting_Location_LocationID
            HasRequired(a => a.Production_WorkOrder).WithMany(b => b.Production_WorkOrderRoutings).HasForeignKey(c => c.WorkOrderId).WillCascadeOnDelete(false); // FK_WorkOrderRouting_WorkOrder_WorkOrderID
        }
    }

    // ProductVendor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Purchasing_ProductVendorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_ProductVendor>
    {
        public Purchasing_ProductVendorConfiguration()
            : this("Purchasing")
        {
        }

        public Purchasing_ProductVendorConfiguration(string schema)
        {
            ToTable("ProductVendor", schema);
            HasKey(x => new { x.ProductId, x.BusinessEntityId });

            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AverageLeadTime).HasColumnName(@"AverageLeadTime").IsRequired().HasColumnType("int");
            Property(x => x.StandardPrice).HasColumnName(@"StandardPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.LastReceiptCost).HasColumnName(@"LastReceiptCost").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.LastReceiptDate).HasColumnName(@"LastReceiptDate").IsOptional().HasColumnType("datetime");
            Property(x => x.MinOrderQty).HasColumnName(@"MinOrderQty").IsRequired().HasColumnType("int");
            Property(x => x.MaxOrderQty).HasColumnName(@"MaxOrderQty").IsRequired().HasColumnType("int");
            Property(x => x.OnOrderQty).HasColumnName(@"OnOrderQty").IsOptional().HasColumnType("int");
            Property(x => x.UnitMeasureCode).HasColumnName(@"UnitMeasureCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Production_Product).WithMany(b => b.Purchasing_ProductVendors).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ProductVendor_Product_ProductID
            HasRequired(a => a.Production_UnitMeasure).WithMany(b => b.Purchasing_ProductVendors).HasForeignKey(c => c.UnitMeasureCode).WillCascadeOnDelete(false); // FK_ProductVendor_UnitMeasure_UnitMeasureCode
            HasRequired(a => a.Purchasing_Vendor).WithMany(b => b.Purchasing_ProductVendors).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_ProductVendor_Vendor_BusinessEntityID
        }
    }

    // PurchaseOrderDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Purchasing_PurchaseOrderDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_PurchaseOrderDetail>
    {
        public Purchasing_PurchaseOrderDetailConfiguration()
            : this("Purchasing")
        {
        }

        public Purchasing_PurchaseOrderDetailConfiguration(string schema)
        {
            ToTable("PurchaseOrderDetail", schema);
            HasKey(x => new { x.PurchaseOrderId, x.PurchaseOrderDetailId });

            Property(x => x.PurchaseOrderId).HasColumnName(@"PurchaseOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PurchaseOrderDetailId).HasColumnName(@"PurchaseOrderDetailID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DueDate).HasColumnName(@"DueDate").IsRequired().HasColumnType("datetime");
            Property(x => x.OrderQty).HasColumnName(@"OrderQty").IsRequired().HasColumnType("smallint");
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int");
            Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.LineTotal).HasColumnName(@"LineTotal").IsRequired().HasColumnType("money").HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.ReceivedQty).HasColumnName(@"ReceivedQty").IsRequired().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.RejectedQty).HasColumnName(@"RejectedQty").IsRequired().HasColumnType("decimal").HasPrecision(8,2);
            Property(x => x.StockedQty).HasColumnName(@"StockedQty").IsRequired().HasColumnType("decimal").HasPrecision(9,2).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Production_Product).WithMany(b => b.Purchasing_PurchaseOrderDetails).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_PurchaseOrderDetail_Product_ProductID
            HasRequired(a => a.Purchasing_PurchaseOrderHeader).WithMany(b => b.Purchasing_PurchaseOrderDetails).HasForeignKey(c => c.PurchaseOrderId).WillCascadeOnDelete(false); // FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID
        }
    }

    // PurchaseOrderHeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Purchasing_PurchaseOrderHeaderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_PurchaseOrderHeader>
    {
        public Purchasing_PurchaseOrderHeaderConfiguration()
            : this("Purchasing")
        {
        }

        public Purchasing_PurchaseOrderHeaderConfiguration(string schema)
        {
            ToTable("PurchaseOrderHeader", schema);
            HasKey(x => x.PurchaseOrderId);

            Property(x => x.PurchaseOrderId).HasColumnName(@"PurchaseOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RevisionNumber).HasColumnName(@"RevisionNumber").IsRequired().HasColumnType("tinyint");
            Property(x => x.Status).HasColumnName(@"Status").IsRequired().HasColumnType("tinyint");
            Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").IsRequired().HasColumnType("int");
            Property(x => x.VendorId).HasColumnName(@"VendorID").IsRequired().HasColumnType("int");
            Property(x => x.ShipMethodId).HasColumnName(@"ShipMethodID").IsRequired().HasColumnType("int");
            Property(x => x.OrderDate).HasColumnName(@"OrderDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ShipDate).HasColumnName(@"ShipDate").IsOptional().HasColumnType("datetime");
            Property(x => x.SubTotal).HasColumnName(@"SubTotal").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.TaxAmt).HasColumnName(@"TaxAmt").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Freight).HasColumnName(@"Freight").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.TotalDue).HasColumnName(@"TotalDue").IsRequired().HasColumnType("money").HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.HumanResources_Employee).WithMany(b => b.Purchasing_PurchaseOrderHeaders).HasForeignKey(c => c.EmployeeId).WillCascadeOnDelete(false); // FK_PurchaseOrderHeader_Employee_EmployeeID
            HasRequired(a => a.Purchasing_ShipMethod).WithMany(b => b.Purchasing_PurchaseOrderHeaders).HasForeignKey(c => c.ShipMethodId).WillCascadeOnDelete(false); // FK_PurchaseOrderHeader_ShipMethod_ShipMethodID
            HasRequired(a => a.Purchasing_Vendor).WithMany(b => b.Purchasing_PurchaseOrderHeaders).HasForeignKey(c => c.VendorId).WillCascadeOnDelete(false); // FK_PurchaseOrderHeader_Vendor_VendorID
        }
    }

    // ShipMethod
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Purchasing_ShipMethodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_ShipMethod>
    {
        public Purchasing_ShipMethodConfiguration()
            : this("Purchasing")
        {
        }

        public Purchasing_ShipMethodConfiguration(string schema)
        {
            ToTable("ShipMethod", schema);
            HasKey(x => x.ShipMethodId);

            Property(x => x.ShipMethodId).HasColumnName(@"ShipMethodID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ShipBase).HasColumnName(@"ShipBase").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ShipRate).HasColumnName(@"ShipRate").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Vendor
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Purchasing_VendorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Purchasing_Vendor>
    {
        public Purchasing_VendorConfiguration()
            : this("Purchasing")
        {
        }

        public Purchasing_VendorConfiguration(string schema)
        {
            ToTable("Vendor", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CreditRating).HasColumnName(@"CreditRating").IsRequired().HasColumnType("tinyint");
            Property(x => x.PreferredVendorStatus).HasColumnName(@"PreferredVendorStatus").IsRequired().HasColumnType("bit");
            Property(x => x.ActiveFlag).HasColumnName(@"ActiveFlag").IsRequired().HasColumnType("bit");
            Property(x => x.PurchasingWebServiceUrl).HasColumnName(@"PurchasingWebServiceURL").IsOptional().HasColumnType("nvarchar").HasMaxLength(1024);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_BusinessEntity).WithOptional(b => b.Purchasing_Vendor).WillCascadeOnDelete(false); // FK_Vendor_BusinessEntity_BusinessEntityID
        }
    }

    // CountryRegionCurrency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_CountryRegionCurrencyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_CountryRegionCurrency>
    {
        public Sales_CountryRegionCurrencyConfiguration()
            : this("Sales")
        {
        }

        public Sales_CountryRegionCurrencyConfiguration(string schema)
        {
            ToTable("CountryRegionCurrency", schema);
            HasKey(x => new { x.CountryRegionCode, x.CurrencyCode });

            Property(x => x.CountryRegionCode).HasColumnName(@"CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CurrencyCode).HasColumnName(@"CurrencyCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_CountryRegion).WithMany(b => b.Sales_CountryRegionCurrencies).HasForeignKey(c => c.CountryRegionCode).WillCascadeOnDelete(false); // FK_CountryRegionCurrency_CountryRegion_CountryRegionCode
            HasRequired(a => a.Sales_Currency).WithMany(b => b.Sales_CountryRegionCurrencies).HasForeignKey(c => c.CurrencyCode).WillCascadeOnDelete(false); // FK_CountryRegionCurrency_Currency_CurrencyCode
        }
    }

    // CreditCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_CreditCardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_CreditCard>
    {
        public Sales_CreditCardConfiguration()
            : this("Sales")
        {
        }

        public Sales_CreditCardConfiguration(string schema)
        {
            ToTable("CreditCard", schema);
            HasKey(x => x.CreditCardId);

            Property(x => x.CreditCardId).HasColumnName(@"CreditCardID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CardType).HasColumnName(@"CardType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CardNumber).HasColumnName(@"CardNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.ExpMonth).HasColumnName(@"ExpMonth").IsRequired().HasColumnType("tinyint");
            Property(x => x.ExpYear).HasColumnName(@"ExpYear").IsRequired().HasColumnType("smallint");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // Currency
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_CurrencyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_Currency>
    {
        public Sales_CurrencyConfiguration()
            : this("Sales")
        {
        }

        public Sales_CurrencyConfiguration(string schema)
        {
            ToTable("Currency", schema);
            HasKey(x => x.CurrencyCode);

            Property(x => x.CurrencyCode).HasColumnName(@"CurrencyCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // CurrencyRate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_CurrencyRateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_CurrencyRate>
    {
        public Sales_CurrencyRateConfiguration()
            : this("Sales")
        {
        }

        public Sales_CurrencyRateConfiguration(string schema)
        {
            ToTable("CurrencyRate", schema);
            HasKey(x => x.CurrencyRateId);

            Property(x => x.CurrencyRateId).HasColumnName(@"CurrencyRateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CurrencyRateDate).HasColumnName(@"CurrencyRateDate").IsRequired().HasColumnType("datetime");
            Property(x => x.FromCurrencyCode).HasColumnName(@"FromCurrencyCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.ToCurrencyCode).HasColumnName(@"ToCurrencyCode").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(3);
            Property(x => x.AverageRate).HasColumnName(@"AverageRate").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.EndOfDayRate).HasColumnName(@"EndOfDayRate").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Sales_Currency_FromCurrencyCode).WithMany(b => b.FromCurrencyCode).HasForeignKey(c => c.FromCurrencyCode).WillCascadeOnDelete(false); // FK_CurrencyRate_Currency_FromCurrencyCode
            HasRequired(a => a.Sales_Currency_ToCurrencyCode).WithMany(b => b.ToCurrencyCode).HasForeignKey(c => c.ToCurrencyCode).WillCascadeOnDelete(false); // FK_CurrencyRate_Currency_ToCurrencyCode
        }
    }

    // Customer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_CustomerConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_Customer>
    {
        public Sales_CustomerConfiguration()
            : this("Sales")
        {
        }

        public Sales_CustomerConfiguration(string schema)
        {
            ToTable("Customer", schema);
            HasKey(x => x.CustomerId);

            Property(x => x.CustomerId).HasColumnName(@"CustomerID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.PersonId).HasColumnName(@"PersonID").IsOptional().HasColumnType("int");
            Property(x => x.StoreId).HasColumnName(@"StoreID").IsOptional().HasColumnType("int");
            Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").IsOptional().HasColumnType("int");
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(10).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.Person_Person).WithMany(b => b.Sales_Customers).HasForeignKey(c => c.PersonId).WillCascadeOnDelete(false); // FK_Customer_Person_PersonID
            HasOptional(a => a.Sales_SalesTerritory).WithMany(b => b.Sales_Customers).HasForeignKey(c => c.TerritoryId).WillCascadeOnDelete(false); // FK_Customer_SalesTerritory_TerritoryID
            HasOptional(a => a.Sales_Store).WithMany(b => b.Sales_Customers).HasForeignKey(c => c.StoreId).WillCascadeOnDelete(false); // FK_Customer_Store_StoreID
        }
    }

    // PersonCreditCard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_PersonCreditCardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_PersonCreditCard>
    {
        public Sales_PersonCreditCardConfiguration()
            : this("Sales")
        {
        }

        public Sales_PersonCreditCardConfiguration(string schema)
        {
            ToTable("PersonCreditCard", schema);
            HasKey(x => new { x.BusinessEntityId, x.CreditCardId });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreditCardId).HasColumnName(@"CreditCardID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_Person).WithMany(b => b.Sales_PersonCreditCards).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_PersonCreditCard_Person_BusinessEntityID
            HasRequired(a => a.Sales_CreditCard).WithMany(b => b.Sales_PersonCreditCards).HasForeignKey(c => c.CreditCardId).WillCascadeOnDelete(false); // FK_PersonCreditCard_CreditCard_CreditCardID
        }
    }

    // SalesOrderDetail
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesOrderDetailConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesOrderDetail>
    {
        public Sales_SalesOrderDetailConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesOrderDetailConfiguration(string schema)
        {
            ToTable("SalesOrderDetail", schema);
            HasKey(x => new { x.SalesOrderId, x.SalesOrderDetailId });

            Property(x => x.SalesOrderId).HasColumnName(@"SalesOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SalesOrderDetailId).HasColumnName(@"SalesOrderDetailID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CarrierTrackingNumber).HasColumnName(@"CarrierTrackingNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.OrderQty).HasColumnName(@"OrderQty").IsRequired().HasColumnType("smallint");
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int");
            Property(x => x.SpecialOfferId).HasColumnName(@"SpecialOfferID").IsRequired().HasColumnType("int");
            Property(x => x.UnitPrice).HasColumnName(@"UnitPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.UnitPriceDiscount).HasColumnName(@"UnitPriceDiscount").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.LineTotal).HasColumnName(@"LineTotal").IsRequired().HasColumnType("numeric").HasPrecision(38,6).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Sales_SalesOrderHeader).WithMany(b => b.Sales_SalesOrderDetails).HasForeignKey(c => c.SalesOrderId); // FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID
            HasRequired(a => a.Sales_SpecialOfferProduct).WithMany(b => b.Sales_SalesOrderDetails).HasForeignKey(c => new { c.SpecialOfferId, c.ProductId }).WillCascadeOnDelete(false); // FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID
        }
    }

    // SalesOrderHeader
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesOrderHeaderConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesOrderHeader>
    {
        public Sales_SalesOrderHeaderConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesOrderHeaderConfiguration(string schema)
        {
            ToTable("SalesOrderHeader", schema);
            HasKey(x => x.SalesOrderId);

            Property(x => x.SalesOrderId).HasColumnName(@"SalesOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RevisionNumber).HasColumnName(@"RevisionNumber").IsRequired().HasColumnType("tinyint");
            Property(x => x.OrderDate).HasColumnName(@"OrderDate").IsRequired().HasColumnType("datetime");
            Property(x => x.DueDate).HasColumnName(@"DueDate").IsRequired().HasColumnType("datetime");
            Property(x => x.ShipDate).HasColumnName(@"ShipDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Status).HasColumnName(@"Status").IsRequired().HasColumnType("tinyint");
            Property(x => x.OnlineOrderFlag).HasColumnName(@"OnlineOrderFlag").IsRequired().HasColumnType("bit");
            Property(x => x.SalesOrderNumber).HasColumnName(@"SalesOrderNumber").IsRequired().HasColumnType("nvarchar").HasMaxLength(25).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.PurchaseOrderNumber).HasColumnName(@"PurchaseOrderNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(25);
            Property(x => x.AccountNumber).HasColumnName(@"AccountNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.CustomerId).HasColumnName(@"CustomerID").IsRequired().HasColumnType("int");
            Property(x => x.SalesPersonId).HasColumnName(@"SalesPersonID").IsOptional().HasColumnType("int");
            Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").IsOptional().HasColumnType("int");
            Property(x => x.BillToAddressId).HasColumnName(@"BillToAddressID").IsRequired().HasColumnType("int");
            Property(x => x.ShipToAddressId).HasColumnName(@"ShipToAddressID").IsRequired().HasColumnType("int");
            Property(x => x.ShipMethodId).HasColumnName(@"ShipMethodID").IsRequired().HasColumnType("int");
            Property(x => x.CreditCardId).HasColumnName(@"CreditCardID").IsOptional().HasColumnType("int");
            Property(x => x.CreditCardApprovalCode).HasColumnName(@"CreditCardApprovalCode").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(15);
            Property(x => x.CurrencyRateId).HasColumnName(@"CurrencyRateID").IsOptional().HasColumnType("int");
            Property(x => x.SubTotal).HasColumnName(@"SubTotal").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.TaxAmt).HasColumnName(@"TaxAmt").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Freight).HasColumnName(@"Freight").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.TotalDue).HasColumnName(@"TotalDue").IsRequired().HasColumnType("money").HasPrecision(19,4).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);
            Property(x => x.Comment).HasColumnName(@"Comment").IsOptional().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.Sales_CreditCard).WithMany(b => b.Sales_SalesOrderHeaders).HasForeignKey(c => c.CreditCardId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_CreditCard_CreditCardID
            HasOptional(a => a.Sales_CurrencyRate).WithMany(b => b.Sales_SalesOrderHeaders).HasForeignKey(c => c.CurrencyRateId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_CurrencyRate_CurrencyRateID
            HasOptional(a => a.Sales_SalesPerson).WithMany(b => b.Sales_SalesOrderHeaders).HasForeignKey(c => c.SalesPersonId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_SalesPerson_SalesPersonID
            HasOptional(a => a.Sales_SalesTerritory).WithMany(b => b.Sales_SalesOrderHeaders).HasForeignKey(c => c.TerritoryId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_SalesTerritory_TerritoryID
            HasRequired(a => a.BillToAddress).WithMany(b => b.BillToAddress).HasForeignKey(c => c.BillToAddressId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_Address_BillToAddressID
            HasRequired(a => a.Purchasing_ShipMethod).WithMany(b => b.Sales_SalesOrderHeaders).HasForeignKey(c => c.ShipMethodId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_ShipMethod_ShipMethodID
            HasRequired(a => a.Sales_Customer).WithMany(b => b.Sales_SalesOrderHeaders).HasForeignKey(c => c.CustomerId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_Customer_CustomerID
            HasRequired(a => a.ShipToAddress).WithMany(b => b.ShipToAddress).HasForeignKey(c => c.ShipToAddressId).WillCascadeOnDelete(false); // FK_SalesOrderHeader_Address_ShipToAddressID
        }
    }

    // SalesOrderHeaderSalesReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesOrderHeaderSalesReasonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesOrderHeaderSalesReason>
    {
        public Sales_SalesOrderHeaderSalesReasonConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesOrderHeaderSalesReasonConfiguration(string schema)
        {
            ToTable("SalesOrderHeaderSalesReason", schema);
            HasKey(x => new { x.SalesOrderId, x.SalesReasonId });

            Property(x => x.SalesOrderId).HasColumnName(@"SalesOrderID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SalesReasonId).HasColumnName(@"SalesReasonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Sales_SalesOrderHeader).WithMany(b => b.Sales_SalesOrderHeaderSalesReasons).HasForeignKey(c => c.SalesOrderId); // FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID
            HasRequired(a => a.Sales_SalesReason).WithMany(b => b.Sales_SalesOrderHeaderSalesReasons).HasForeignKey(c => c.SalesReasonId).WillCascadeOnDelete(false); // FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID
        }
    }

    // SalesPerson
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesPersonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesPerson>
    {
        public Sales_SalesPersonConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesPersonConfiguration(string schema)
        {
            ToTable("SalesPerson", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").IsOptional().HasColumnType("int");
            Property(x => x.SalesQuota).HasColumnName(@"SalesQuota").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Bonus).HasColumnName(@"Bonus").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.CommissionPct).HasColumnName(@"CommissionPct").IsRequired().HasColumnType("smallmoney").HasPrecision(10,4);
            Property(x => x.SalesYtd).HasColumnName(@"SalesYTD").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.SalesLastYear).HasColumnName(@"SalesLastYear").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.Sales_SalesTerritory).WithMany(b => b.Sales_SalesPersons).HasForeignKey(c => c.TerritoryId).WillCascadeOnDelete(false); // FK_SalesPerson_SalesTerritory_TerritoryID
            HasRequired(a => a.HumanResources_Employee).WithOptional(b => b.Sales_SalesPerson).WillCascadeOnDelete(false); // FK_SalesPerson_Employee_BusinessEntityID
        }
    }

    // SalesPersonQuotaHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesPersonQuotaHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesPersonQuotaHistory>
    {
        public Sales_SalesPersonQuotaHistoryConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesPersonQuotaHistoryConfiguration(string schema)
        {
            ToTable("SalesPersonQuotaHistory", schema);
            HasKey(x => new { x.BusinessEntityId, x.QuotaDate });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.QuotaDate).HasColumnName(@"QuotaDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SalesQuota).HasColumnName(@"SalesQuota").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Sales_SalesPerson).WithMany(b => b.Sales_SalesPersonQuotaHistories).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID
        }
    }

    // SalesReason
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesReasonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesReason>
    {
        public Sales_SalesReasonConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesReasonConfiguration(string schema)
        {
            ToTable("SalesReason", schema);
            HasKey(x => x.SalesReasonId);

            Property(x => x.SalesReasonId).HasColumnName(@"SalesReasonID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ReasonType).HasColumnName(@"ReasonType").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // SalesTaxRate
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesTaxRateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesTaxRate>
    {
        public Sales_SalesTaxRateConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesTaxRateConfiguration(string schema)
        {
            ToTable("SalesTaxRate", schema);
            HasKey(x => x.SalesTaxRateId);

            Property(x => x.SalesTaxRateId).HasColumnName(@"SalesTaxRateID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.StateProvinceId).HasColumnName(@"StateProvinceID").IsRequired().HasColumnType("int");
            Property(x => x.TaxType).HasColumnName(@"TaxType").IsRequired().HasColumnType("tinyint");
            Property(x => x.TaxRate).HasColumnName(@"TaxRate").IsRequired().HasColumnType("smallmoney").HasPrecision(10,4);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_StateProvince).WithMany(b => b.Sales_SalesTaxRates).HasForeignKey(c => c.StateProvinceId).WillCascadeOnDelete(false); // FK_SalesTaxRate_StateProvince_StateProvinceID
        }
    }

    // SalesTerritory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesTerritoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesTerritory>
    {
        public Sales_SalesTerritoryConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesTerritoryConfiguration(string schema)
        {
            ToTable("SalesTerritory", schema);
            HasKey(x => x.TerritoryId);

            Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CountryRegionCode).HasColumnName(@"CountryRegionCode").IsRequired().HasColumnType("nvarchar").HasMaxLength(3);
            Property(x => x.Group).HasColumnName(@"Group").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SalesYtd).HasColumnName(@"SalesYTD").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.SalesLastYear).HasColumnName(@"SalesLastYear").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.CostYtd).HasColumnName(@"CostYTD").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.CostLastYear).HasColumnName(@"CostLastYear").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Person_CountryRegion).WithMany(b => b.Sales_SalesTerritories).HasForeignKey(c => c.CountryRegionCode).WillCascadeOnDelete(false); // FK_SalesTerritory_CountryRegion_CountryRegionCode
        }
    }

    // SalesTerritoryHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SalesTerritoryHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SalesTerritoryHistory>
    {
        public Sales_SalesTerritoryHistoryConfiguration()
            : this("Sales")
        {
        }

        public Sales_SalesTerritoryHistoryConfiguration(string schema)
        {
            ToTable("SalesTerritoryHistory", schema);
            HasKey(x => new { x.BusinessEntityId, x.StartDate, x.TerritoryId });

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.TerritoryId).HasColumnName(@"TerritoryID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("datetime").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsOptional().HasColumnType("datetime");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Sales_SalesPerson).WithMany(b => b.Sales_SalesTerritoryHistories).HasForeignKey(c => c.BusinessEntityId).WillCascadeOnDelete(false); // FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID
            HasRequired(a => a.Sales_SalesTerritory).WithMany(b => b.Sales_SalesTerritoryHistories).HasForeignKey(c => c.TerritoryId).WillCascadeOnDelete(false); // FK_SalesTerritoryHistory_SalesTerritory_TerritoryID
        }
    }

    // ShoppingCartItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_ShoppingCartItemConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_ShoppingCartItem>
    {
        public Sales_ShoppingCartItemConfiguration()
            : this("Sales")
        {
        }

        public Sales_ShoppingCartItemConfiguration(string schema)
        {
            ToTable("ShoppingCartItem", schema);
            HasKey(x => x.ShoppingCartItemId);

            Property(x => x.ShoppingCartItemId).HasColumnName(@"ShoppingCartItemID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ShoppingCartId).HasColumnName(@"ShoppingCartID").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Quantity).HasColumnName(@"Quantity").IsRequired().HasColumnType("int");
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int");
            Property(x => x.DateCreated).HasColumnName(@"DateCreated").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Production_Product).WithMany(b => b.Sales_ShoppingCartItems).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_ShoppingCartItem_Product_ProductID
        }
    }

    // SpecialOffer
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SpecialOfferConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SpecialOffer>
    {
        public Sales_SpecialOfferConfiguration()
            : this("Sales")
        {
        }

        public Sales_SpecialOfferConfiguration(string schema)
        {
            ToTable("SpecialOffer", schema);
            HasKey(x => x.SpecialOfferId);

            Property(x => x.SpecialOfferId).HasColumnName(@"SpecialOfferID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Description).HasColumnName(@"Description").IsRequired().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.DiscountPct).HasColumnName(@"DiscountPct").IsRequired().HasColumnType("smallmoney").HasPrecision(10,4);
            Property(x => x.Type).HasColumnName(@"Type").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Category).HasColumnName(@"Category").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().HasColumnType("datetime");
            Property(x => x.EndDate).HasColumnName(@"EndDate").IsRequired().HasColumnType("datetime");
            Property(x => x.MinQty).HasColumnName(@"MinQty").IsRequired().HasColumnType("int");
            Property(x => x.MaxQty).HasColumnName(@"MaxQty").IsOptional().HasColumnType("int");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");
        }
    }

    // SpecialOfferProduct
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_SpecialOfferProductConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_SpecialOfferProduct>
    {
        public Sales_SpecialOfferProductConfiguration()
            : this("Sales")
        {
        }

        public Sales_SpecialOfferProductConfiguration(string schema)
        {
            ToTable("SpecialOfferProduct", schema);
            HasKey(x => new { x.SpecialOfferId, x.ProductId });

            Property(x => x.SpecialOfferId).HasColumnName(@"SpecialOfferID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ProductId).HasColumnName(@"ProductID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Production_Product).WithMany(b => b.Sales_SpecialOfferProducts).HasForeignKey(c => c.ProductId).WillCascadeOnDelete(false); // FK_SpecialOfferProduct_Product_ProductID
            HasRequired(a => a.Sales_SpecialOffer).WithMany(b => b.Sales_SpecialOfferProducts).HasForeignKey(c => c.SpecialOfferId).WillCascadeOnDelete(false); // FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID
        }
    }

    // Store
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sales_StoreConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sales_Store>
    {
        public Sales_StoreConfiguration()
            : this("Sales")
        {
        }

        public Sales_StoreConfiguration(string schema)
        {
            ToTable("Store", schema);
            HasKey(x => x.BusinessEntityId);

            Property(x => x.BusinessEntityId).HasColumnName(@"BusinessEntityID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SalesPersonId).HasColumnName(@"SalesPersonID").IsOptional().HasColumnType("int");
            Property(x => x.Demographics).HasColumnName(@"Demographics").IsOptional().HasColumnType("xml");
            Property(x => x.Rowguid).HasColumnName(@"rowguid").IsRequired().HasColumnType("uniqueidentifier");
            Property(x => x.ModifiedDate).HasColumnName(@"ModifiedDate").IsRequired().HasColumnType("datetime");

            // Foreign keys
            HasOptional(a => a.Sales_SalesPerson).WithMany(b => b.Sales_Stores).HasForeignKey(c => c.SalesPersonId).WillCascadeOnDelete(false); // FK_Store_SalesPerson_SalesPersonID
            HasRequired(a => a.Person_BusinessEntity).WithOptional(b => b.Sales_Store).WillCascadeOnDelete(false); // FK_Store_BusinessEntity_BusinessEntityID
        }
    }

    #endregion

    #region Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class UspGetBillOfMaterialsReturnModel
    {
        public System.Int32? ProductAssemblyID { get; set; }
        public System.Int32? ComponentID { get; set; }
        public System.String ComponentDesc { get; set; }
        public System.Decimal? TotalQuantity { get; set; }
        public System.Decimal? StandardCost { get; set; }
        public System.Decimal? ListPrice { get; set; }
        public System.Int16? BOMLevel { get; set; }
        public System.Int32? RecursionLevel { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class UspGetEmployeeManagersReturnModel
    {
        public System.Int32? RecursionLevel { get; set; }
        public System.Int32? BusinessEntityID { get; set; }
        public System.String FirstName { get; set; }
        public System.String LastName { get; set; }
        public System.String OrganizationNode { get; set; }
        public System.String ManagerFirstName { get; set; }
        public System.String ManagerLastName { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class UspGetManagerEmployeesReturnModel
    {
        public System.Int32? RecursionLevel { get; set; }
        public System.String OrganizationNode { get; set; }
        public System.String ManagerFirstName { get; set; }
        public System.String ManagerLastName { get; set; }
        public System.Int32? BusinessEntityID { get; set; }
        public System.String FirstName { get; set; }
        public System.String LastName { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class UspGetWhereUsedProductIdReturnModel
    {
        public System.Int32? ProductAssemblyID { get; set; }
        public System.Int32? ComponentID { get; set; }
        public System.String ComponentDesc { get; set; }
        public System.Decimal? TotalQuantity { get; set; }
        public System.Decimal? StandardCost { get; set; }
        public System.Decimal? ListPrice { get; set; }
        public System.Int16? BOMLevel { get; set; }
        public System.Int32? RecursionLevel { get; set; }
    }

    #endregion

}
// </auto-generated>

